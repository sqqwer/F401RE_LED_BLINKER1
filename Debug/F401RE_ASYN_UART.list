
F401RE_ASYN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006160  08006160  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006168  08006168  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a98  2000007c  080061ec  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b14  080061ec  00024b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001343c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288d  00000000  00000000  000334e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00035d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00036b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e54  00000000  00000000  000378e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd6c  00000000  00000000  0003a734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e80d  00000000  00000000  0004a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  000d8d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005984 	.word	0x08005984

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005984 	.word	0x08005984

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b598      	push	{r3, r4, r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	ledStatus.isOn		= 0;
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <main+0xb4>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
	ledStatus.blinkInt	= 1000;
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <main+0xb4>)
 8000514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000518:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fbf7 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f86f 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8f7 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8cb 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052a:	f001 ffef 	bl	800250c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 800052e:	4824      	ldr	r0, [pc, #144]	; (80005c0 <main+0xb8>)
 8000530:	f002 f8e3 	bl	80026fa <osMutexNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a23      	ldr	r2, [pc, #140]	; (80005c4 <main+0xbc>)
 8000538:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of messageQueue */
  messageQueueHandle = osMessageQueueNew (30, sizeof(queueMess_t), &messageQueue_attributes);
 800053a:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <main+0xc0>)
 800053c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000540:	201e      	movs	r0, #30
 8000542:	f002 f960 	bl	8002806 <osMessageQueueNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a20      	ldr	r2, [pc, #128]	; (80005cc <main+0xc4>)
 800054a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of receiveData */
  receiveDataHandle = osThreadNew(StartreceiveDataTask, NULL, &receiveData_attributes);
 800054c:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <main+0xc8>)
 800054e:	2100      	movs	r1, #0
 8000550:	4820      	ldr	r0, [pc, #128]	; (80005d4 <main+0xcc>)
 8000552:	f002 f825 	bl	80025a0 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a1f      	ldr	r2, [pc, #124]	; (80005d8 <main+0xd0>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of parseData */
  parseDataHandle = osThreadNew(StartParseDataTask, NULL, &parseData_attributes);
 800055c:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <main+0xd4>)
 800055e:	2100      	movs	r1, #0
 8000560:	481f      	ldr	r0, [pc, #124]	; (80005e0 <main+0xd8>)
 8000562:	f002 f81d 	bl	80025a0 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <main+0xdc>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of ledControl */
  ledControlHandle = osThreadNew(StartledControl, NULL, &ledControl_attributes);
 800056c:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <main+0xe0>)
 800056e:	2100      	movs	r1, #0
 8000570:	481e      	ldr	r0, [pc, #120]	; (80005ec <main+0xe4>)
 8000572:	f002 f815 	bl	80025a0 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <main+0xe8>)
 800057a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Transmit(&huart2, (const uint8_t*)name, strlen(name), TX_TIMEOUT);
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0xec>)
 800057e:	681c      	ldr	r4, [r3, #0]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <main+0xec>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe35 	bl	80001f4 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	2332      	movs	r3, #50	; 0x32
 8000590:	4621      	mov	r1, r4
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <main+0xf0>)
 8000594:	f001 fb6f 	bl	8001c76 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (const uint8_t*)instrucrin, strlen(instrucrin), TX_TIMEOUT);
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <main+0xf4>)
 800059a:	681c      	ldr	r4, [r3, #0]
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <main+0xf4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe27 	bl	80001f4 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	2332      	movs	r3, #50	; 0x32
 80005ac:	4621      	mov	r1, r4
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <main+0xf0>)
 80005b0:	f001 fb61 	bl	8001c76 <HAL_UART_Transmit>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f001 ffce 	bl	8002554 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0xb0>
 80005ba:	bf00      	nop
 80005bc:	200000f0 	.word	0x200000f0
 80005c0:	08005fb0 	.word	0x08005fb0
 80005c4:	200000ec 	.word	0x200000ec
 80005c8:	08005f98 	.word	0x08005f98
 80005cc:	200000e8 	.word	0x200000e8
 80005d0:	08005f2c 	.word	0x08005f2c
 80005d4:	08000779 	.word	0x08000779
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	08005f50 	.word	0x08005f50
 80005e0:	080008a1 	.word	0x080008a1
 80005e4:	200000e0 	.word	0x200000e0
 80005e8:	08005f74 	.word	0x08005f74
 80005ec:	08000afd 	.word	0x08000afd
 80005f0:	200000e4 	.word	0x200000e4
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000098 	.word	0x20000098
 80005fc:	20000004 	.word	0x20000004

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f80c 	bl	800562c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xb8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xb8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <SystemClock_Config+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xbc>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fe59 	bl	800132c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000680:	f000 fa6a 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f8bc 	bl	800181c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 fa55 	bl	8000b58 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f001 fa70 	bl	8001bdc <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 fa29 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000098 	.word	0x20000098
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_GPIO_Init+0x5c>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_GPIO_Init+0x5c>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6313      	str	r3, [r2, #48]	; 0x30
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_GPIO_Init+0x5c>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2120      	movs	r1, #32
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <MX_GPIO_Init+0x60>)
 800074a:	f000 fdbb 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800074e:	2320      	movs	r3, #32
 8000750:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_GPIO_Init+0x60>)
 8000764:	f000 fc2a 	bl	8000fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000

08000778 <StartreceiveDataTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartreceiveDataTask */
void StartreceiveDataTask(void *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800077e:	af00      	add	r7, sp, #0
 8000780:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000784:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000788:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  HAL_StatusTypeDef	status;
	  uint16_t			buffLen;
	  uint8_t			mssgBuff[256];

	  memset(mssgBuff, '\0', MSSG_LENGTHS);
 800078a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800078e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f004 ff49 	bl	800562c <memset>
	  for(;;)
	  {
		if ((status=HAL_UART_Receive(&huart2, mssgBuff, sizeof(uint8_t)*MSSG_LENGTHS, RX_TIMEOUT)) == HAL_OK || status == HAL_TIMEOUT)
 800079a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800079e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a6:	483a      	ldr	r0, [pc, #232]	; (8000890 <StartreceiveDataTask+0x118>)
 80007a8:	f001 faf7 	bl	8001d9a <HAL_UART_Receive>
 80007ac:	4603      	mov	r3, r0
 80007ae:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 80007b2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <StartreceiveDataTask+0x4a>
 80007ba:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d136      	bne.n	8000830 <StartreceiveDataTask+0xb8>
		{
			if ((buffLen=strlen((const char*)mssgBuff)))
 80007c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd14 	bl	80001f4 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 80007d2:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d054      	beq.n	8000884 <StartreceiveDataTask+0x10c>
			{
				queueMess_t mssgCnt;

				mssgCnt.len = buffLen;
 80007da:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80007de:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80007e2:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 80007e6:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
				memcpy(mssgCnt.messg, mssgBuff, MSSG_LENGTHS);
 80007ea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80007ee:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80007f2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80007f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80007fa:	4610      	mov	r0, r2
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000802:	461a      	mov	r2, r3
 8000804:	f004 ff04 	bl	8005610 <memcpy>

				if (!osMessageQueuePut(messageQueueHandle, &mssgCnt, 0, QUEUE_TIMEOUT))
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <StartreceiveDataTask+0x11c>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	f107 010c 	add.w	r1, r7, #12
 8000810:	2332      	movs	r3, #50	; 0x32
 8000812:	2200      	movs	r2, #0
 8000814:	f002 f86a 	bl	80028ec <osMessageQueuePut>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d132      	bne.n	8000884 <StartreceiveDataTask+0x10c>
				{
//					char*	str = "UART Reciver task : message put in queue.\n\r";
//					HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), TX_TIMEOUT);
					memset(mssgBuff, '\0', MSSG_LENGTHS);
 800081e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f004 feff 	bl	800562c <memset>
			if ((buffLen=strlen((const char*)mssgBuff)))
 800082e:	e029      	b.n	8000884 <StartreceiveDataTask+0x10c>
				}
			}
		}
		else if (status == HAL_BUSY)
 8000830:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8000834:	2b02      	cmp	r3, #2
 8000836:	d10f      	bne.n	8000858 <StartreceiveDataTask+0xe0>
		{
			char*	bussy = "UART Reciver task : UART port was bussy\n\r";
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <StartreceiveDataTask+0x120>)
 800083a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			HAL_UART_Transmit(&huart2, (const uint8_t*)bussy, strlen(bussy), TX_TIMEOUT);
 800083e:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8000842:	f7ff fcd7 	bl	80001f4 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	2332      	movs	r3, #50	; 0x32
 800084c:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <StartreceiveDataTask+0x118>)
 8000852:	f001 fa10 	bl	8001c76 <HAL_UART_Transmit>
 8000856:	e016      	b.n	8000886 <StartreceiveDataTask+0x10e>
		}
		else if (status == HAL_ERROR)
 8000858:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800085c:	2b01      	cmp	r3, #1
 800085e:	d112      	bne.n	8000886 <StartreceiveDataTask+0x10e>
		{
			char*	bussy = "UART Reciver task : unexpected error while receiving data from UART\n\r";
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <StartreceiveDataTask+0x124>)
 8000862:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			HAL_UART_Transmit(&huart2, (const uint8_t*)bussy, strlen(bussy), TX_TIMEOUT);
 8000866:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800086a:	f7ff fcc3 	bl	80001f4 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	2332      	movs	r3, #50	; 0x32
 8000874:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <StartreceiveDataTask+0x118>)
 800087a:	f001 f9fc 	bl	8001c76 <HAL_UART_Transmit>
			Error_Handler();
 800087e:	f000 f96b 	bl	8000b58 <Error_Handler>
 8000882:	e000      	b.n	8000886 <StartreceiveDataTask+0x10e>
			if ((buffLen=strlen((const char*)mssgBuff)))
 8000884:	bf00      	nop
		}
	    osDelay(50);
 8000886:	2032      	movs	r0, #50	; 0x32
 8000888:	f001 ff1c 	bl	80026c4 <osDelay>
		if ((status=HAL_UART_Receive(&huart2, mssgBuff, sizeof(uint8_t)*MSSG_LENGTHS, RX_TIMEOUT)) == HAL_OK || status == HAL_TIMEOUT)
 800088c:	e785      	b.n	800079a <StartreceiveDataTask+0x22>
 800088e:	bf00      	nop
 8000890:	20000098 	.word	0x20000098
 8000894:	200000e8 	.word	0x200000e8
 8000898:	08005cc0 	.word	0x08005cc0
 800089c:	08005cec 	.word	0x08005cec

080008a0 <StartParseDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParseDataTask */
void StartParseDataTask(void *argument)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b0d3      	sub	sp, #332	; 0x14c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80008aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80008ae:	6018      	str	r0, [r3, #0]
  for(;;)
  {
	  char*	pBuff;
	  queueMess_t mssgCnt;

	  mssgCnt.len = 0;
 80008b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80008b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80008b8:	2200      	movs	r2, #0
 80008ba:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	  memset(mssgCnt.messg, '\0', MSSG_LENGTHS);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 feaf 	bl	800562c <memset>

	  if (!osMessageQueueGet(messageQueueHandle, &mssgCnt, 0, QUEUE_TIMEOUT))
 80008ce:	4b7d      	ldr	r3, [pc, #500]	; (8000ac4 <StartParseDataTask+0x224>)
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	f107 0108 	add.w	r1, r7, #8
 80008d6:	2332      	movs	r3, #50	; 0x32
 80008d8:	2200      	movs	r2, #0
 80008da:	f002 f867 	bl	80029ac <osMessageQueueGet>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f040 80ea 	bne.w	8000aba <StartParseDataTask+0x21a>
//		  char* func = "Parse task : Item are geted \n\r";
//		  HAL_UART_Transmit(&huart2, mssgCnt.messg, sizeof(uint8_t)*mssgCnt.len, TX_TIMEOUT);
//		  char* str = "\n\r";
//		  HAL_UART_Transmit(&huart2, (const uint8_t*)func, strlen(func), TX_TIMEOUT);

		  pBuff = (char*) mssgCnt.messg;
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

		  if (!strcmp(pBuff, "LED ON\r"))
 80008ee:	4976      	ldr	r1, [pc, #472]	; (8000ac8 <StartParseDataTask+0x228>)
 80008f0:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80008f4:	f7ff fc74 	bl	80001e0 <strcmp>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d113      	bne.n	8000926 <StartParseDataTask+0x86>
		  {
			  char* str = "\n\r-------------------\n\rLed is on now.\n\r-------------------\n\n\r";
 80008fe:	4b73      	ldr	r3, [pc, #460]	; (8000acc <StartParseDataTask+0x22c>)
 8000900:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), 500);
 8000904:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000908:	f7ff fc74 	bl	80001f4 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b29a      	uxth	r2, r3
 8000910:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000914:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8000918:	486d      	ldr	r0, [pc, #436]	; (8000ad0 <StartParseDataTask+0x230>)
 800091a:	f001 f9ac 	bl	8001c76 <HAL_UART_Transmit>
		  	  ledStatus.isOn = 1;
 800091e:	4b6d      	ldr	r3, [pc, #436]	; (8000ad4 <StartParseDataTask+0x234>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e0c9      	b.n	8000aba <StartParseDataTask+0x21a>
		  }
		  else if (!strcmp(pBuff, "LED OFF\r"))
 8000926:	496c      	ldr	r1, [pc, #432]	; (8000ad8 <StartParseDataTask+0x238>)
 8000928:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800092c:	f7ff fc58 	bl	80001e0 <strcmp>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d113      	bne.n	800095e <StartParseDataTask+0xbe>
		  {
			  char* str = "\n\r-------------------\n\rLed is off now.\n\r-------------------\n\n\r";
 8000936:	4b69      	ldr	r3, [pc, #420]	; (8000adc <StartParseDataTask+0x23c>)
 8000938:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), 500);
 800093c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000940:	f7ff fc58 	bl	80001f4 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800094c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000950:	485f      	ldr	r0, [pc, #380]	; (8000ad0 <StartParseDataTask+0x230>)
 8000952:	f001 f990 	bl	8001c76 <HAL_UART_Transmit>
			  ledStatus.isOn = 0;
 8000956:	4b5f      	ldr	r3, [pc, #380]	; (8000ad4 <StartParseDataTask+0x234>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e0ad      	b.n	8000aba <StartParseDataTask+0x21a>
		  }
		  else if (!strncmp(pBuff, "LED BLINK ", 10))
 800095e:	220a      	movs	r2, #10
 8000960:	495f      	ldr	r1, [pc, #380]	; (8000ae0 <StartParseDataTask+0x240>)
 8000962:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8000966:	f004 fed3 	bl	8005710 <strncmp>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d13f      	bne.n	80009f0 <StartParseDataTask+0x150>
		  {
			  uint16_t blinkRate;

			  blinkRate = atoi(pBuff + 10);
 8000970:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000974:	330a      	adds	r3, #10
 8000976:	4618      	mov	r0, r3
 8000978:	f004 fe00 	bl	800557c <atoi>
 800097c:	4603      	mov	r3, r0
 800097e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
		  	  ledStatus.blinkInt = blinkRate;
 8000982:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8000986:	4a53      	ldr	r2, [pc, #332]	; (8000ad4 <StartParseDataTask+0x234>)
 8000988:	6053      	str	r3, [r2, #4]

			  char* str = "\n\r-------------------\n\rBlink rate : ";
 800098a:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <StartParseDataTask+0x244>)
 800098c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			  char* str1 = "\n\r-------------------\n\n\r";
 8000990:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <StartParseDataTask+0x248>)
 8000992:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), 500);
 8000996:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800099a:	f7ff fc2b 	bl	80001f4 <strlen>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009a6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80009aa:	4849      	ldr	r0, [pc, #292]	; (8000ad0 <StartParseDataTask+0x230>)
 80009ac:	f001 f963 	bl	8001c76 <HAL_UART_Transmit>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)(pBuff + 10), strlen (pBuff + 10), 500);
 80009b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80009b4:	f103 040a 	add.w	r4, r3, #10
 80009b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80009bc:	330a      	adds	r3, #10
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc18 	bl	80001f4 <strlen>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009cc:	4621      	mov	r1, r4
 80009ce:	4840      	ldr	r0, [pc, #256]	; (8000ad0 <StartParseDataTask+0x230>)
 80009d0:	f001 f951 	bl	8001c76 <HAL_UART_Transmit>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen (str1), 500);
 80009d4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80009d8:	f7ff fc0c 	bl	80001f4 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009e4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80009e8:	4839      	ldr	r0, [pc, #228]	; (8000ad0 <StartParseDataTask+0x230>)
 80009ea:	f001 f944 	bl	8001c76 <HAL_UART_Transmit>
 80009ee:	e064      	b.n	8000aba <StartParseDataTask+0x21a>
		  }
		  else if (!strcmp(pBuff, "STATUS\r"))
 80009f0:	493e      	ldr	r1, [pc, #248]	; (8000aec <StartParseDataTask+0x24c>)
 80009f2:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80009f6:	f7ff fbf3 	bl	80001e0 <strcmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14c      	bne.n	8000a9a <StartParseDataTask+0x1fa>
		  {
			  uint8_t numb[15];
		  	  char*		ledIs;
		  	  char* 	str0 = "\n\r-------------------\n\n\r";
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <StartParseDataTask+0x248>)
 8000a02:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		  	  char* 	str1 = "\n\r-------------------\n\rStatus :\n\rled is : on\n\rblink interval : ";
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <StartParseDataTask+0x250>)
 8000a08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  	  char* 	str2 = "\n\r-------------------\n\rStatus :\n\rled is : off\n\rblink interval : ";
 8000a0c:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <StartParseDataTask+0x254>)
 8000a0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		  	  memset(numb, '\0', 10);
 8000a12:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000a16:	220a      	movs	r2, #10
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fe06 	bl	800562c <memset>
		  	  ledIs = (ledStatus.isOn) ? str1 : str2;
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <StartParseDataTask+0x234>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <StartParseDataTask+0x18e>
 8000a28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a2c:	e001      	b.n	8000a32 <StartParseDataTask+0x192>
 8000a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		  	  itoa((int)ledStatus.blinkInt, (char*)numb, 10);
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <StartParseDataTask+0x234>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000a40:	220a      	movs	r2, #10
 8000a42:	4619      	mov	r1, r3
 8000a44:	f004 fde0 	bl	8005608 <itoa>

		  	  HAL_UART_Transmit(&huart2, (uint8_t *)ledIs, strlen (ledIs), 500);
 8000a48:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a4c:	f7ff fbd2 	bl	80001f4 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a58:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000a5c:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <StartParseDataTask+0x230>)
 8000a5e:	f001 f90a 	bl	8001c76 <HAL_UART_Transmit>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)numb, strlen ((const char*)numb), 500);
 8000a62:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fbc4 	bl	80001f4 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000a74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a78:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <StartParseDataTask+0x230>)
 8000a7a:	f001 f8fc 	bl	8001c76 <HAL_UART_Transmit>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)str0, strlen (str0), 500);
 8000a7e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8000a82:	f7ff fbb7 	bl	80001f4 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a8e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <StartParseDataTask+0x230>)
 8000a94:	f001 f8ef 	bl	8001c76 <HAL_UART_Transmit>
 8000a98:	e00f      	b.n	8000aba <StartParseDataTask+0x21a>
		  }
		  else
		  {
			  char*	 str = "\n\n\rCommand not correct ::\n\rCheck spaces in word\n\rCorrect command LED ON, LED OFF, LED BLINK <TIME>, STATUS\n\n\r";
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <StartParseDataTask+0x258>)
 8000a9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), 500);
 8000aa0:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8000aa4:	f7ff fba6 	bl	80001f4 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ab0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <StartParseDataTask+0x230>)
 8000ab6:	f001 f8de 	bl	8001c76 <HAL_UART_Transmit>
		  }

	  }
    osDelay(1000);
 8000aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abe:	f001 fe01 	bl	80026c4 <osDelay>
  {
 8000ac2:	e6f5      	b.n	80008b0 <StartParseDataTask+0x10>
 8000ac4:	200000e8 	.word	0x200000e8
 8000ac8:	08005d34 	.word	0x08005d34
 8000acc:	08005d3c 	.word	0x08005d3c
 8000ad0:	20000098 	.word	0x20000098
 8000ad4:	200000f0 	.word	0x200000f0
 8000ad8:	08005d7c 	.word	0x08005d7c
 8000adc:	08005d88 	.word	0x08005d88
 8000ae0:	08005dc8 	.word	0x08005dc8
 8000ae4:	08005dd4 	.word	0x08005dd4
 8000ae8:	08005dfc 	.word	0x08005dfc
 8000aec:	08005e18 	.word	0x08005e18
 8000af0:	08005e20 	.word	0x08005e20
 8000af4:	08005e60 	.word	0x08005e60
 8000af8:	08005ea4 	.word	0x08005ea4

08000afc <StartledControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartledControl */
void StartledControl(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint32_t tick;

  for(;;)
  {
	tick = 1000;
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	60fb      	str	r3, [r7, #12]
	if (ledStatus.blinkInt > 15 && ledStatus.isOn)
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <StartledControl+0x54>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d90b      	bls.n	8000b2a <StartledControl+0x2e>
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <StartledControl+0x54>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <StartledControl+0x2e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <StartledControl+0x58>)
 8000b1e:	f000 fbea 	bl	80012f6 <HAL_GPIO_TogglePin>
	tick = ledStatus.blinkInt;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <StartledControl+0x54>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e00e      	b.n	8000b48 <StartledControl+0x4c>
	}
	else
	{
		if (ledStatus.isOn)
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <StartledControl+0x54>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d005      	beq.n	8000b3e <StartledControl+0x42>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2120      	movs	r1, #32
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <StartledControl+0x58>)
 8000b38:	f000 fbc4 	bl	80012c4 <HAL_GPIO_WritePin>
 8000b3c:	e004      	b.n	8000b48 <StartledControl+0x4c>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <StartledControl+0x58>)
 8000b44:	f000 fbbe 	bl	80012c4 <HAL_GPIO_WritePin>
	}
    osDelay(tick);
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f001 fdbb 	bl	80026c4 <osDelay>
	tick = 1000;
 8000b4e:	e7d9      	b.n	8000b04 <StartledControl+0x8>
 8000b50:	200000f0 	.word	0x200000f0
 8000b54:	40020000 	.word	0x40020000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	f06f 0001 	mvn.w	r0, #1
 8000baa:	f000 f9de 	bl	8000f6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12b      	bne.n	8000c36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c16:	230c      	movs	r3, #12
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c26:	2307      	movs	r3, #7
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_UART_MspInit+0x8c>)
 8000c32:	f000 f9c3 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f898 	bl	8000db0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c80:	f003 fc14 	bl	80044ac <xTaskGetSchedulerState>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d001      	beq.n	8000c8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c8a:	f004 f9fd 	bl	8005088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce2:	f7ff ffd7 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f004 fc53 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc0d 	bl	8000508 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cfc:	08006170 	.word	0x08006170
  ldr r2, =_sbss
 8000d00:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d04:	20004b14 	.word	0x20004b14

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f90d 	bl	8000f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff ff10 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f917 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f8ed 	bl	8000f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000010 	.word	0x20000010
 8000dac:	2000000c 	.word	0x2000000c

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	200000f8 	.word	0x200000f8

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000f8 	.word	0x200000f8

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f20:	d301      	bcc.n	8000f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00f      	b.n	8000f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <SysTick_Config+0x40>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2e:	210f      	movs	r1, #15
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f7ff ff8e 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SysTick_Config+0x40>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SysTick_Config+0x40>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff47 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7c:	f7ff ff5c 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff ff8e 	bl	8000ea8 <NVIC_EncodePriority>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff5d 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffb0 	bl	8000f10 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e159      	b.n	800128c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8148 	bne.w	8001286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a2 	beq.w	8001286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b54      	ldr	r3, [pc, #336]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a49      	ldr	r2, [pc, #292]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x202>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x1fe>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2f8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x1fa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x2fc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x1f6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x300>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x1f2>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x304>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f aea2 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	041a      	lsls	r2, r3, #16
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43d9      	mvns	r1, r3
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	400b      	ands	r3, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e267      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d075      	beq.n	8001436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d00c      	beq.n	8001370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001356:	4b85      	ldr	r3, [pc, #532]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d112      	bne.n	8001388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4b82      	ldr	r3, [pc, #520]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800136e:	d10b      	bne.n	8001388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	4b7e      	ldr	r3, [pc, #504]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d05b      	beq.n	8001434 <HAL_RCC_OscConfig+0x108>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d157      	bne.n	8001434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e242      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d106      	bne.n	80013a0 <HAL_RCC_OscConfig+0x74>
 8001392:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a75      	ldr	r2, [pc, #468]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e01d      	b.n	80013dc <HAL_RCC_OscConfig+0xb0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x98>
 80013aa:	4b70      	ldr	r3, [pc, #448]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6f      	ldr	r2, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b6d      	ldr	r3, [pc, #436]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6c      	ldr	r2, [pc, #432]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0xb0>
 80013c4:	4b69      	ldr	r3, [pc, #420]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a68      	ldr	r2, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b66      	ldr	r3, [pc, #408]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a65      	ldr	r2, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d013      	beq.n	800140c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fcf8 	bl	8000dd8 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fcf4 	bl	8000dd8 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e207      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0xc0>
 800140a:	e014      	b.n	8001436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fce4 	bl	8000dd8 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fce0 	bl	8000dd8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1f3      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0xe8>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d063      	beq.n	800150a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001456:	2b08      	cmp	r3, #8
 8001458:	d11c      	bne.n	8001494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_RCC_OscConfig+0x152>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e1c7      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4937      	ldr	r1, [pc, #220]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	e03a      	b.n	800150a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_OscConfig+0x244>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a2:	f7ff fc99 	bl	8000dd8 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc95 	bl	8000dd8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1a8      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4925      	ldr	r1, [pc, #148]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0x244>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fc78 	bl	8000dd8 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc74 	bl	8000dd8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e187      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d036      	beq.n	8001584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d016      	beq.n	800154c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_RCC_OscConfig+0x248>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fc58 	bl	8000dd8 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fc54 	bl	8000dd8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e167      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x200>
 800154a:	e01b      	b.n	8001584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_RCC_OscConfig+0x248>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fc41 	bl	8000dd8 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	e00e      	b.n	8001578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fc3d 	bl	8000dd8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d907      	bls.n	8001578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e150      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	42470000 	.word	0x42470000
 8001574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800157a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ea      	bne.n	800155a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8097 	beq.w	80016c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b81      	ldr	r3, [pc, #516]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b7d      	ldr	r3, [pc, #500]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a7c      	ldr	r2, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ce:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a73      	ldr	r2, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015da:	f7ff fbfd 	bl	8000dd8 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e2:	f7ff fbf9 	bl	8000dd8 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e10c      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x2ea>
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	4a63      	ldr	r2, [pc, #396]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x324>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x30c>
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a5e      	ldr	r2, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a5b      	ldr	r2, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x324>
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	4b55      	ldr	r3, [pc, #340]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 0304 	bic.w	r3, r3, #4
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d015      	beq.n	8001684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fbbe 	bl	8000dd8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	e00a      	b.n	8001676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff fbba 	bl	8000dd8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0cb      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ee      	beq.n	8001660 <HAL_RCC_OscConfig+0x334>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fba8 	bl	8000dd8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fba4 	bl	8000dd8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0b5      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a38      	ldr	r2, [pc, #224]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a1 	beq.w	800180c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d05c      	beq.n	8001790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d141      	bne.n	8001762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb78 	bl	8000dd8 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb74 	bl	8000dd8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e087      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	3b01      	subs	r3, #1
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	491b      	ldr	r1, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fb4d 	bl	8000dd8 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fb49 	bl	8000dd8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e05c      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x416>
 8001760:	e054      	b.n	800180c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fb36 	bl	8000dd8 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fb32 	bl	8000dd8 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e045      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x444>
 800178e:	e03d      	b.n	800180c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e038      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000
 80017a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x4ec>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d028      	beq.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d121      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d11a      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d111      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cc      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d90c      	bls.n	8001858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d044      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d003      	beq.n	80018da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e067      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4934      	ldr	r1, [pc, #208]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff fa64 	bl	8000dd8 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff fa60 	bl	8000dd8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e04f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d20c      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f821 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f9c4 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08005fc0 	.word	0x08005fc0
 80019e0:	20000008 	.word	0x20000008
 80019e4:	2000000c 	.word	0x2000000c

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ec:	b090      	sub	sp, #64	; 0x40
 80019ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
 80019f4:	2300      	movs	r3, #0
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d00d      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x40>
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	f200 80a1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x34>
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a1a:	e09b      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a20:	e09b      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a26:	e098      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a28:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a32:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d028      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	2200      	movs	r2, #0
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	627a      	str	r2, [r7, #36]	; 0x24
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a50:	2100      	movs	r1, #0
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a54:	fb03 f201 	mul.w	r2, r3, r1
 8001a58:	2300      	movs	r3, #0
 8001a5a:	fb00 f303 	mul.w	r3, r0, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a62:	fba0 1202 	umull	r1, r2, r0, r2
 8001a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a68:	460a      	mov	r2, r1
 8001a6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6e:	4413      	add	r3, r2
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a74:	2200      	movs	r2, #0
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	61fa      	str	r2, [r7, #28]
 8001a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a82:	f7fe fbbf 	bl	8000204 <__aeabi_uldivmod>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a8e:	e053      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	2200      	movs	r2, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	617a      	str	r2, [r7, #20]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aa2:	f04f 0b00 	mov.w	fp, #0
 8001aa6:	4652      	mov	r2, sl
 8001aa8:	465b      	mov	r3, fp
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	0159      	lsls	r1, r3, #5
 8001ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab8:	0150      	lsls	r0, r2, #5
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ebb2 080a 	subs.w	r8, r2, sl
 8001ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ada:	ebb2 0408 	subs.w	r4, r2, r8
 8001ade:	eb63 0509 	sbc.w	r5, r3, r9
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	00eb      	lsls	r3, r5, #3
 8001aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af0:	00e2      	lsls	r2, r4, #3
 8001af2:	4614      	mov	r4, r2
 8001af4:	461d      	mov	r5, r3
 8001af6:	eb14 030a 	adds.w	r3, r4, sl
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	eb45 030b 	adc.w	r3, r5, fp
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	2200      	movs	r2, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b2c:	f7fe fb6a 	bl	8000204 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3740      	adds	r7, #64	; 0x40
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	017d7840 	.word	0x017d7840

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08005fd0 	.word	0x08005fd0

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb8:	f7ff ffdc 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0b5b      	lsrs	r3, r3, #13
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08005fd0 	.word	0x08005fd0

08001bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e03f      	b.n	8001c6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe ffda 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2224      	movs	r2, #36	; 0x24
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f9cb 	bl	8001fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b08a      	sub	sp, #40	; 0x28
 8001c7a:	af02      	add	r7, sp, #8
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d17c      	bne.n	8001d90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_UART_Transmit+0x2c>
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e075      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_UART_Transmit+0x3e>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e06e      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2221      	movs	r2, #33	; 0x21
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cca:	f7ff f885 	bl	8000dd8 <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_UART_Transmit+0x82>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d104      	bne.n	8001cf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	e003      	b.n	8001d00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d08:	e02a      	b.n	8001d60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2200      	movs	r2, #0
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f8e2 	bl	8001ede <UART_WaitOnFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e036      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10b      	bne.n	8001d42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e007      	b.n	8001d52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1cf      	bne.n	8001d0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	2140      	movs	r1, #64	; 0x40
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f8b2 	bl	8001ede <UART_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e006      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b08a      	sub	sp, #40	; 0x28
 8001d9e:	af02      	add	r7, sp, #8
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	f040 808c 	bne.w	8001ed4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_UART_Receive+0x2e>
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e084      	b.n	8001ed6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_UART_Receive+0x40>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e07d      	b.n	8001ed6 <HAL_UART_Receive+0x13c>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2222      	movs	r2, #34	; 0x22
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001df6:	f7fe ffef 	bl	8000dd8 <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e10:	d108      	bne.n	8001e24 <HAL_UART_Receive+0x8a>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d104      	bne.n	8001e24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	e003      	b.n	8001e2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e34:	e043      	b.n	8001ebe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2120      	movs	r1, #32
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f84c 	bl	8001ede <UART_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e042      	b.n	8001ed6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	e01f      	b.n	8001eb0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e78:	d007      	beq.n	8001e8a <HAL_UART_Receive+0xf0>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10a      	bne.n	8001e98 <HAL_UART_Receive+0xfe>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e008      	b.n	8001eaa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1b6      	bne.n	8001e36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b090      	sub	sp, #64	; 0x40
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eee:	e050      	b.n	8001f92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d04c      	beq.n	8001f92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8001efe:	f7fe ff6b 	bl	8000dd8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d241      	bcs.n	8001f92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	330c      	adds	r3, #12
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	e853 3f00 	ldrex	r3, [r3]
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f2e:	637a      	str	r2, [r7, #52]	; 0x34
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f36:	e841 2300 	strex	r3, r2, [r1]
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1e5      	bne.n	8001f0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3314      	adds	r3, #20
 8001f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	e853 3f00 	ldrex	r3, [r3]
 8001f50:	613b      	str	r3, [r7, #16]
   return(result);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3314      	adds	r3, #20
 8001f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f62:	623a      	str	r2, [r7, #32]
 8001f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f66:	69f9      	ldr	r1, [r7, #28]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	e841 2300 	strex	r3, r2, [r1]
 8001f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e5      	bne.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e00f      	b.n	8001fb2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d09f      	beq.n	8001ef0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3740      	adds	r7, #64	; 0x40
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc0:	b0c0      	sub	sp, #256	; 0x100
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	68d9      	ldr	r1, [r3, #12]
 8001fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	ea40 0301 	orr.w	r3, r0, r1
 8001fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002014:	f021 010c 	bic.w	r1, r1, #12
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002022:	430b      	orrs	r3, r1
 8002024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002036:	6999      	ldr	r1, [r3, #24]
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	ea40 0301 	orr.w	r3, r0, r1
 8002042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b8f      	ldr	r3, [pc, #572]	; (8002288 <UART_SetConfig+0x2cc>)
 800204c:	429a      	cmp	r2, r3
 800204e:	d005      	beq.n	800205c <UART_SetConfig+0xa0>
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <UART_SetConfig+0x2d0>)
 8002058:	429a      	cmp	r2, r3
 800205a:	d104      	bne.n	8002066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800205c:	f7ff fdaa 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002064:	e003      	b.n	800206e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002066:	f7ff fd91 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 800206a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800206e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002078:	f040 810c 	bne.w	8002294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800207c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002080:	2200      	movs	r2, #0
 8002082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800208a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800208e:	4622      	mov	r2, r4
 8002090:	462b      	mov	r3, r5
 8002092:	1891      	adds	r1, r2, r2
 8002094:	65b9      	str	r1, [r7, #88]	; 0x58
 8002096:	415b      	adcs	r3, r3
 8002098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800209a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800209e:	4621      	mov	r1, r4
 80020a0:	eb12 0801 	adds.w	r8, r2, r1
 80020a4:	4629      	mov	r1, r5
 80020a6:	eb43 0901 	adc.w	r9, r3, r1
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020be:	4690      	mov	r8, r2
 80020c0:	4699      	mov	r9, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	eb18 0303 	adds.w	r3, r8, r3
 80020c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020cc:	462b      	mov	r3, r5
 80020ce:	eb49 0303 	adc.w	r3, r9, r3
 80020d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020ea:	460b      	mov	r3, r1
 80020ec:	18db      	adds	r3, r3, r3
 80020ee:	653b      	str	r3, [r7, #80]	; 0x50
 80020f0:	4613      	mov	r3, r2
 80020f2:	eb42 0303 	adc.w	r3, r2, r3
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
 80020f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002100:	f7fe f880 	bl	8000204 <__aeabi_uldivmod>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <UART_SetConfig+0x2d4>)
 800210a:	fba3 2302 	umull	r2, r3, r3, r2
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	011c      	lsls	r4, r3, #4
 8002112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002116:	2200      	movs	r2, #0
 8002118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800211c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002124:	4642      	mov	r2, r8
 8002126:	464b      	mov	r3, r9
 8002128:	1891      	adds	r1, r2, r2
 800212a:	64b9      	str	r1, [r7, #72]	; 0x48
 800212c:	415b      	adcs	r3, r3
 800212e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002134:	4641      	mov	r1, r8
 8002136:	eb12 0a01 	adds.w	sl, r2, r1
 800213a:	4649      	mov	r1, r9
 800213c:	eb43 0b01 	adc.w	fp, r3, r1
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800214c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002154:	4692      	mov	sl, r2
 8002156:	469b      	mov	fp, r3
 8002158:	4643      	mov	r3, r8
 800215a:	eb1a 0303 	adds.w	r3, sl, r3
 800215e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002162:	464b      	mov	r3, r9
 8002164:	eb4b 0303 	adc.w	r3, fp, r3
 8002168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800217c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002180:	460b      	mov	r3, r1
 8002182:	18db      	adds	r3, r3, r3
 8002184:	643b      	str	r3, [r7, #64]	; 0x40
 8002186:	4613      	mov	r3, r2
 8002188:	eb42 0303 	adc.w	r3, r2, r3
 800218c:	647b      	str	r3, [r7, #68]	; 0x44
 800218e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002196:	f7fe f835 	bl	8000204 <__aeabi_uldivmod>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <UART_SetConfig+0x2d4>)
 80021a2:	fba3 2301 	umull	r2, r3, r3, r1
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2264      	movs	r2, #100	; 0x64
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	1acb      	subs	r3, r1, r3
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <UART_SetConfig+0x2d4>)
 80021b8:	fba3 2302 	umull	r2, r3, r3, r2
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021c4:	441c      	add	r4, r3
 80021c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021d8:	4642      	mov	r2, r8
 80021da:	464b      	mov	r3, r9
 80021dc:	1891      	adds	r1, r2, r2
 80021de:	63b9      	str	r1, [r7, #56]	; 0x38
 80021e0:	415b      	adcs	r3, r3
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021e8:	4641      	mov	r1, r8
 80021ea:	1851      	adds	r1, r2, r1
 80021ec:	6339      	str	r1, [r7, #48]	; 0x30
 80021ee:	4649      	mov	r1, r9
 80021f0:	414b      	adcs	r3, r1
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002200:	4659      	mov	r1, fp
 8002202:	00cb      	lsls	r3, r1, #3
 8002204:	4651      	mov	r1, sl
 8002206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800220a:	4651      	mov	r1, sl
 800220c:	00ca      	lsls	r2, r1, #3
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	4603      	mov	r3, r0
 8002214:	4642      	mov	r2, r8
 8002216:	189b      	adds	r3, r3, r2
 8002218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800221c:	464b      	mov	r3, r9
 800221e:	460a      	mov	r2, r1
 8002220:	eb42 0303 	adc.w	r3, r2, r3
 8002224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800223c:	460b      	mov	r3, r1
 800223e:	18db      	adds	r3, r3, r3
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
 8002242:	4613      	mov	r3, r2
 8002244:	eb42 0303 	adc.w	r3, r2, r3
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800224e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002252:	f7fd ffd7 	bl	8000204 <__aeabi_uldivmod>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <UART_SetConfig+0x2d4>)
 800225c:	fba3 1302 	umull	r1, r3, r3, r2
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	2164      	movs	r1, #100	; 0x64
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	3332      	adds	r3, #50	; 0x32
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <UART_SetConfig+0x2d4>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4422      	add	r2, r4
 8002282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002284:	e105      	b.n	8002492 <UART_SetConfig+0x4d6>
 8002286:	bf00      	nop
 8002288:	40011000 	.word	0x40011000
 800228c:	40011400 	.word	0x40011400
 8002290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002298:	2200      	movs	r2, #0
 800229a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800229e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022a6:	4642      	mov	r2, r8
 80022a8:	464b      	mov	r3, r9
 80022aa:	1891      	adds	r1, r2, r2
 80022ac:	6239      	str	r1, [r7, #32]
 80022ae:	415b      	adcs	r3, r3
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022b6:	4641      	mov	r1, r8
 80022b8:	1854      	adds	r4, r2, r1
 80022ba:	4649      	mov	r1, r9
 80022bc:	eb43 0501 	adc.w	r5, r3, r1
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	00eb      	lsls	r3, r5, #3
 80022ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ce:	00e2      	lsls	r2, r4, #3
 80022d0:	4614      	mov	r4, r2
 80022d2:	461d      	mov	r5, r3
 80022d4:	4643      	mov	r3, r8
 80022d6:	18e3      	adds	r3, r4, r3
 80022d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022dc:	464b      	mov	r3, r9
 80022de:	eb45 0303 	adc.w	r3, r5, r3
 80022e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002302:	4629      	mov	r1, r5
 8002304:	008b      	lsls	r3, r1, #2
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800230c:	4621      	mov	r1, r4
 800230e:	008a      	lsls	r2, r1, #2
 8002310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002314:	f7fd ff76 	bl	8000204 <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <UART_SetConfig+0x4e4>)
 800231e:	fba3 2302 	umull	r2, r3, r3, r2
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	011c      	lsls	r4, r3, #4
 8002326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800232a:	2200      	movs	r2, #0
 800232c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002338:	4642      	mov	r2, r8
 800233a:	464b      	mov	r3, r9
 800233c:	1891      	adds	r1, r2, r2
 800233e:	61b9      	str	r1, [r7, #24]
 8002340:	415b      	adcs	r3, r3
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002348:	4641      	mov	r1, r8
 800234a:	1851      	adds	r1, r2, r1
 800234c:	6139      	str	r1, [r7, #16]
 800234e:	4649      	mov	r1, r9
 8002350:	414b      	adcs	r3, r1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002360:	4659      	mov	r1, fp
 8002362:	00cb      	lsls	r3, r1, #3
 8002364:	4651      	mov	r1, sl
 8002366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800236a:	4651      	mov	r1, sl
 800236c:	00ca      	lsls	r2, r1, #3
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	4603      	mov	r3, r0
 8002374:	4642      	mov	r2, r8
 8002376:	189b      	adds	r3, r3, r2
 8002378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800237c:	464b      	mov	r3, r9
 800237e:	460a      	mov	r2, r1
 8002380:	eb42 0303 	adc.w	r3, r2, r3
 8002384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	67bb      	str	r3, [r7, #120]	; 0x78
 8002392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023a0:	4649      	mov	r1, r9
 80023a2:	008b      	lsls	r3, r1, #2
 80023a4:	4641      	mov	r1, r8
 80023a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023aa:	4641      	mov	r1, r8
 80023ac:	008a      	lsls	r2, r1, #2
 80023ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023b2:	f7fd ff27 	bl	8000204 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <UART_SetConfig+0x4e4>)
 80023bc:	fba3 1302 	umull	r1, r3, r3, r2
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	2164      	movs	r1, #100	; 0x64
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	4a34      	ldr	r2, [pc, #208]	; (80024a0 <UART_SetConfig+0x4e4>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023da:	441c      	add	r4, r3
 80023dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023e0:	2200      	movs	r2, #0
 80023e2:	673b      	str	r3, [r7, #112]	; 0x70
 80023e4:	677a      	str	r2, [r7, #116]	; 0x74
 80023e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023ea:	4642      	mov	r2, r8
 80023ec:	464b      	mov	r3, r9
 80023ee:	1891      	adds	r1, r2, r2
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	415b      	adcs	r3, r3
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023fa:	4641      	mov	r1, r8
 80023fc:	1851      	adds	r1, r2, r1
 80023fe:	6039      	str	r1, [r7, #0]
 8002400:	4649      	mov	r1, r9
 8002402:	414b      	adcs	r3, r1
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002412:	4659      	mov	r1, fp
 8002414:	00cb      	lsls	r3, r1, #3
 8002416:	4651      	mov	r1, sl
 8002418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800241c:	4651      	mov	r1, sl
 800241e:	00ca      	lsls	r2, r1, #3
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	4603      	mov	r3, r0
 8002426:	4642      	mov	r2, r8
 8002428:	189b      	adds	r3, r3, r2
 800242a:	66bb      	str	r3, [r7, #104]	; 0x68
 800242c:	464b      	mov	r3, r9
 800242e:	460a      	mov	r2, r1
 8002430:	eb42 0303 	adc.w	r3, r2, r3
 8002434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	663b      	str	r3, [r7, #96]	; 0x60
 8002440:	667a      	str	r2, [r7, #100]	; 0x64
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800244e:	4649      	mov	r1, r9
 8002450:	008b      	lsls	r3, r1, #2
 8002452:	4641      	mov	r1, r8
 8002454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002458:	4641      	mov	r1, r8
 800245a:	008a      	lsls	r2, r1, #2
 800245c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002460:	f7fd fed0 	bl	8000204 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <UART_SetConfig+0x4e4>)
 800246a:	fba3 1302 	umull	r1, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2164      	movs	r1, #100	; 0x64
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	3332      	adds	r3, #50	; 0x32
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <UART_SetConfig+0x4e4>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	f003 020f 	and.w	r2, r3, #15
 8002488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4422      	add	r2, r4
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	bf00      	nop
 8002494:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002498:	46bd      	mov	sp, r7
 800249a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249e:	bf00      	nop
 80024a0:	51eb851f 	.word	0x51eb851f

080024a4 <__NVIC_SetPriority>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80024fc:	2100      	movs	r1, #0
 80024fe:	f06f 0004 	mvn.w	r0, #4
 8002502:	f7ff ffcf 	bl	80024a4 <__NVIC_SetPriority>
#endif
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002512:	f3ef 8305 	mrs	r3, IPSR
 8002516:	603b      	str	r3, [r7, #0]
  return(result);
 8002518:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800251e:	f06f 0305 	mvn.w	r3, #5
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	e00c      	b.n	8002540 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <osKernelInitialize+0x44>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <osKernelInitialize+0x44>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002534:	2300      	movs	r3, #0
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	e002      	b.n	8002540 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002540:	687b      	ldr	r3, [r7, #4]
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200000fc 	.word	0x200000fc

08002554 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800255a:	f3ef 8305 	mrs	r3, IPSR
 800255e:	603b      	str	r3, [r7, #0]
  return(result);
 8002560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002566:	f06f 0305 	mvn.w	r3, #5
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	e010      	b.n	8002590 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <osKernelStart+0x48>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d109      	bne.n	800258a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002576:	f7ff ffbf 	bl	80024f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <osKernelStart+0x48>)
 800257c:	2202      	movs	r2, #2
 800257e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002580:	f001 fb38 	bl	8003bf4 <vTaskStartScheduler>
      stat = osOK;
 8002584:	2300      	movs	r3, #0
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	e002      	b.n	8002590 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002590:	687b      	ldr	r3, [r7, #4]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200000fc 	.word	0x200000fc

080025a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b0:	f3ef 8305 	mrs	r3, IPSR
 80025b4:	617b      	str	r3, [r7, #20]
  return(result);
 80025b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d17e      	bne.n	80026ba <osThreadNew+0x11a>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07b      	beq.n	80026ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025c6:	2318      	movs	r3, #24
 80025c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d045      	beq.n	8002666 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <osThreadNew+0x48>
        name = attr->name;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <osThreadNew+0x6e>
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b38      	cmp	r3, #56	; 0x38
 8002600:	d805      	bhi.n	800260e <osThreadNew+0x6e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <osThreadNew+0x72>
        return (NULL);
 800260e:	2300      	movs	r3, #0
 8002610:	e054      	b.n	80026bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00e      	beq.n	8002648 <osThreadNew+0xa8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2bbb      	cmp	r3, #187	; 0xbb
 8002630:	d90a      	bls.n	8002648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <osThreadNew+0xa8>
        mem = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	e010      	b.n	800266a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10c      	bne.n	800266a <osThreadNew+0xca>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <osThreadNew+0xca>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <osThreadNew+0xca>
          mem = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e001      	b.n	800266a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d110      	bne.n	8002692 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002678:	9202      	str	r2, [sp, #8]
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6a3a      	ldr	r2, [r7, #32]
 8002684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f001 f8c8 	bl	800381c <xTaskCreateStatic>
 800268c:	4603      	mov	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	e013      	b.n	80026ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d110      	bne.n	80026ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	b29a      	uxth	r2, r3
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f001 f913 	bl	80038d6 <xTaskCreate>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <osThreadNew+0x11a>
            hTask = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026ba:	693b      	ldr	r3, [r7, #16]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026cc:	f3ef 8305 	mrs	r3, IPSR
 80026d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80026d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <osDelay+0x1c>
    stat = osErrorISR;
 80026d8:	f06f 0305 	mvn.w	r3, #5
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e007      	b.n	80026f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f001 fa4e 	bl	8003b8c <vTaskDelay>
    }
  }

  return (stat);
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b088      	sub	sp, #32
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002706:	f3ef 8305 	mrs	r3, IPSR
 800270a:	60bb      	str	r3, [r7, #8]
  return(result);
 800270c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800270e:	2b00      	cmp	r3, #0
 8002710:	d174      	bne.n	80027fc <osMutexNew+0x102>
    if (attr != NULL) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e001      	b.n	8002724 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <osMutexNew+0x3a>
      rmtx = 1U;
 800272e:	2301      	movs	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e001      	b.n	8002738 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d15c      	bne.n	80027fc <osMutexNew+0x102>
      mem = -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d015      	beq.n	800277a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <osMutexNew+0x6a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b4f      	cmp	r3, #79	; 0x4f
 800275c:	d902      	bls.n	8002764 <osMutexNew+0x6a>
          mem = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e00c      	b.n	800277e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d108      	bne.n	800277e <osMutexNew+0x84>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <osMutexNew+0x84>
            mem = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e001      	b.n	800277e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d112      	bne.n	80027aa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4619      	mov	r1, r3
 8002790:	2004      	movs	r0, #4
 8002792:	f000 fbc0 	bl	8002f16 <xQueueCreateMutexStatic>
 8002796:	61f8      	str	r0, [r7, #28]
 8002798:	e016      	b.n	80027c8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4619      	mov	r1, r3
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 fbb8 	bl	8002f16 <xQueueCreateMutexStatic>
 80027a6:	61f8      	str	r0, [r7, #28]
 80027a8:	e00e      	b.n	80027c8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80027b6:	2004      	movs	r0, #4
 80027b8:	f000 fb95 	bl	8002ee6 <xQueueCreateMutex>
 80027bc:	61f8      	str	r0, [r7, #28]
 80027be:	e003      	b.n	80027c8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80027c0:	2001      	movs	r0, #1
 80027c2:	f000 fb90 	bl	8002ee6 <xQueueCreateMutex>
 80027c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <osMutexNew+0xee>
        if (attr != NULL) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <osMutexNew+0xe2>
          name = attr->name;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e001      	b.n	80027e0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	69f8      	ldr	r0, [r7, #28]
 80027e4:	f000 ffbc 	bl	8003760 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <osMutexNew+0x102>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80027fc:	69fb      	ldr	r3, [r7, #28]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002806:	b580      	push	{r7, lr}
 8002808:	b08a      	sub	sp, #40	; 0x28
 800280a:	af02      	add	r7, sp, #8
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002816:	f3ef 8305 	mrs	r3, IPSR
 800281a:	613b      	str	r3, [r7, #16]
  return(result);
 800281c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800281e:	2b00      	cmp	r3, #0
 8002820:	d15f      	bne.n	80028e2 <osMessageQueueNew+0xdc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05c      	beq.n	80028e2 <osMessageQueueNew+0xdc>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d059      	beq.n	80028e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d029      	beq.n	800288e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <osMessageQueueNew+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b4f      	cmp	r3, #79	; 0x4f
 8002848:	d90e      	bls.n	8002868 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <osMessageQueueNew+0x62>
        mem = 1;
 8002862:	2301      	movs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e014      	b.n	8002892 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d110      	bne.n	8002892 <osMessageQueueNew+0x8c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10c      	bne.n	8002892 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800287c:	2b00      	cmp	r3, #0
 800287e:	d108      	bne.n	8002892 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <osMessageQueueNew+0x8c>
          mem = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e001      	b.n	8002892 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10b      	bne.n	80028b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2100      	movs	r1, #0
 80028a2:	9100      	str	r1, [sp, #0]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fa2e 	bl	8002d08 <xQueueGenericCreateStatic>
 80028ac:	61f8      	str	r0, [r7, #28]
 80028ae:	e008      	b.n	80028c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80028b6:	2200      	movs	r2, #0
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fa9c 	bl	8002df8 <xQueueGenericCreate>
 80028c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e001      	b.n	80028da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80028da:	6979      	ldr	r1, [r7, #20]
 80028dc:	69f8      	ldr	r0, [r7, #28]
 80028de:	f000 ff3f 	bl	8003760 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80028e2:	69fb      	ldr	r3, [r7, #28]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002904:	f3ef 8305 	mrs	r3, IPSR
 8002908:	617b      	str	r3, [r7, #20]
  return(result);
 800290a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800290c:	2b00      	cmp	r3, #0
 800290e:	d028      	beq.n	8002962 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <osMessageQueuePut+0x36>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <osMessageQueuePut+0x36>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002922:	f06f 0303 	mvn.w	r3, #3
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	e038      	b.n	800299c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800292e:	f107 0210 	add.w	r2, r7, #16
 8002932:	2300      	movs	r3, #0
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	69b8      	ldr	r0, [r7, #24]
 8002938:	f000 fc06 	bl	8003148 <xQueueGenericSendFromISR>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d003      	beq.n	800294a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002942:	f06f 0302 	mvn.w	r3, #2
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	e028      	b.n	800299c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d025      	beq.n	800299c <osMessageQueuePut+0xb0>
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <osMessageQueuePut+0xbc>)
 8002952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	e01c      	b.n	800299c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <osMessageQueuePut+0x82>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800296e:	f06f 0303 	mvn.w	r3, #3
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	e012      	b.n	800299c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002976:	2300      	movs	r3, #0
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	69b8      	ldr	r0, [r7, #24]
 800297e:	f000 fae5 	bl	8002f4c <xQueueGenericSend>
 8002982:	4603      	mov	r3, r0
 8002984:	2b01      	cmp	r3, #1
 8002986:	d009      	beq.n	800299c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800298e:	f06f 0301 	mvn.w	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	e002      	b.n	800299c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002996:	f06f 0302 	mvn.w	r3, #2
 800299a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800299c:	69fb      	ldr	r3, [r7, #28]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029c2:	f3ef 8305 	mrs	r3, IPSR
 80029c6:	617b      	str	r3, [r7, #20]
  return(result);
 80029c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d028      	beq.n	8002a20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <osMessageQueueGet+0x34>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <osMessageQueueGet+0x34>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80029e0:	f06f 0303 	mvn.w	r3, #3
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e037      	b.n	8002a58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	461a      	mov	r2, r3
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	69b8      	ldr	r0, [r7, #24]
 80029f6:	f000 fd23 	bl	8003440 <xQueueReceiveFromISR>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d003      	beq.n	8002a08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002a00:	f06f 0302 	mvn.w	r3, #2
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e027      	b.n	8002a58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d024      	beq.n	8002a58 <osMessageQueueGet+0xac>
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <osMessageQueueGet+0xb8>)
 8002a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	e01b      	b.n	8002a58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <osMessageQueueGet+0x80>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002a2c:	f06f 0303 	mvn.w	r3, #3
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e011      	b.n	8002a58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	69b8      	ldr	r0, [r7, #24]
 8002a3a:	f000 fc21 	bl	8003280 <xQueueReceive>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d009      	beq.n	8002a58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002a4a:	f06f 0301 	mvn.w	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e002      	b.n	8002a58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002a52:	f06f 0302 	mvn.w	r3, #2
 8002a56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002a58:	69fb      	ldr	r3, [r7, #28]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <vApplicationGetIdleTaskMemory+0x30>)
 8002a7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000100 	.word	0x20000100
 8002a98:	200001bc 	.word	0x200001bc

08002a9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002aac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a06      	ldr	r2, [pc, #24]	; (8002acc <vApplicationGetTimerTaskMemory+0x30>)
 8002ab2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aba:	601a      	str	r2, [r3, #0]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	200003bc 	.word	0x200003bc
 8002acc:	20000478 	.word	0x20000478

08002ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f103 0208 	add.w	r2, r3, #8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f103 0208 	add.w	r2, r3, #8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f103 0208 	add.w	r2, r3, #8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d103      	bne.n	8002b92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e00c      	b.n	8002bac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3308      	adds	r3, #8
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e002      	b.n	8002ba0 <vListInsert+0x2e>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d2f6      	bcs.n	8002b9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d103      	bne.n	8002c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c62:	f002 f97f 	bl	8004f64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	441a      	add	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	3b01      	subs	r3, #1
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	441a      	add	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d114      	bne.n	8002ce2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01a      	beq.n	8002cf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3310      	adds	r3, #16
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fa2f 	bl	8004128 <xTaskRemoveFromEventList>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <xQueueGenericReset+0xcc>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	e009      	b.n	8002cf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fef2 	bl	8002ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3324      	adds	r3, #36	; 0x24
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff feed 	bl	8002ad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cf6:	f002 f965 	bl	8004fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	; 0x38
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d4a:	bf00      	nop
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <xQueueGenericCreateStatic+0x52>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <xQueueGenericCreateStatic+0x56>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueGenericCreateStatic+0x58>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	623b      	str	r3, [r7, #32]
}
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <xQueueGenericCreateStatic+0x7e>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericCreateStatic+0x82>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericCreateStatic+0x84>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61fb      	str	r3, [r7, #28]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002da6:	2350      	movs	r3, #80	; 0x50
 8002da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b50      	cmp	r3, #80	; 0x50
 8002dae:	d00a      	beq.n	8002dc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	61bb      	str	r3, [r7, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002dc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f83f 	bl	8002e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3730      	adds	r7, #48	; 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	613b      	str	r3, [r7, #16]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3350      	adds	r3, #80	; 0x50
 8002e30:	4618      	mov	r0, r3
 8002e32:	f002 f9b9 	bl	80051a8 <pvPortMalloc>
 8002e36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d011      	beq.n	8002e62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3350      	adds	r3, #80	; 0x50
 8002e46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e50:	79fa      	ldrb	r2, [r7, #7]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f805 	bl	8002e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e62:	69bb      	ldr	r3, [r7, #24]
	}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e002      	b.n	8002e8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	69b8      	ldr	r0, [r7, #24]
 8002e9e:	f7ff fecb 	bl	8002c38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f837 	bl	8002f4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	461a      	mov	r2, r3
 8002efc:	6939      	ldr	r1, [r7, #16]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff7a 	bl	8002df8 <xQueueGenericCreate>
 8002f04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ffd3 	bl	8002eb2 <prvInitialiseMutex>

		return xNewQueue;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
	}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b088      	sub	sp, #32
 8002f1a:	af02      	add	r7, sp, #8
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	6039      	str	r1, [r7, #0]
 8002f20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f22:	2301      	movs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	6939      	ldr	r1, [r7, #16]
 8002f34:	6978      	ldr	r0, [r7, #20]
 8002f36:	f7ff fee7 	bl	8002d08 <xQueueGenericCreateStatic>
 8002f3a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff ffb8 	bl	8002eb2 <prvInitialiseMutex>

		return xNewQueue;
 8002f42:	68fb      	ldr	r3, [r7, #12]
	}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	; 0x38
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueGenericSend+0x32>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <xQueueGenericSend+0x40>
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <xQueueGenericSend+0x44>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <xQueueGenericSend+0x46>
 8002f90:	2300      	movs	r3, #0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <xQueueGenericSend+0x60>
	__asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fa8:	bf00      	nop
 8002faa:	e7fe      	b.n	8002faa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d103      	bne.n	8002fba <xQueueGenericSend+0x6e>
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <xQueueGenericSend+0x72>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <xQueueGenericSend+0x74>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <xQueueGenericSend+0x8e>
	__asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	623b      	str	r3, [r7, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fda:	f001 fa67 	bl	80044ac <xTaskGetSchedulerState>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <xQueueGenericSend+0x9e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <xQueueGenericSend+0xa2>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <xQueueGenericSend+0xa4>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <xQueueGenericSend+0xbe>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	61fb      	str	r3, [r7, #28]
}
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800300a:	f001 ffab 	bl	8004f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	429a      	cmp	r2, r3
 8003018:	d302      	bcc.n	8003020 <xQueueGenericSend+0xd4>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d129      	bne.n	8003074 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003026:	f000 fa8b 	bl	8003540 <prvCopyDataToQueue>
 800302a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	3324      	adds	r3, #36	; 0x24
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f875 	bl	8004128 <xTaskRemoveFromEventList>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003044:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <xQueueGenericSend+0x1f8>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	e00a      	b.n	800306c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800305c:	4b39      	ldr	r3, [pc, #228]	; (8003144 <xQueueGenericSend+0x1f8>)
 800305e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800306c:	f001 ffaa 	bl	8004fc4 <vPortExitCritical>
				return pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	e063      	b.n	800313c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800307a:	f001 ffa3 	bl	8004fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800307e:	2300      	movs	r3, #0
 8003080:	e05c      	b.n	800313c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f8af 	bl	80041f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003092:	2301      	movs	r3, #1
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003096:	f001 ff95 	bl	8004fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800309a:	f000 fe1b 	bl	8003cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800309e:	f001 ff61 	bl	8004f64 <vPortEnterCritical>
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d103      	bne.n	80030b8 <xQueueGenericSend+0x16c>
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030be:	b25b      	sxtb	r3, r3
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d103      	bne.n	80030ce <xQueueGenericSend+0x182>
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ce:	f001 ff79 	bl	8004fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030d2:	1d3a      	adds	r2, r7, #4
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 f89e 	bl	800421c <xTaskCheckForTimeOut>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d124      	bne.n	8003130 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e8:	f000 fb22 	bl	8003730 <prvIsQueueFull>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d018      	beq.n	8003124 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	3310      	adds	r3, #16
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 ffc4 	bl	8004088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003102:	f000 faad 	bl	8003660 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003106:	f000 fdf3 	bl	8003cf0 <xTaskResumeAll>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	f47f af7c 	bne.w	800300a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <xQueueGenericSend+0x1f8>)
 8003114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	e772      	b.n	800300a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003126:	f000 fa9b 	bl	8003660 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800312a:	f000 fde1 	bl	8003cf0 <xTaskResumeAll>
 800312e:	e76c      	b.n	800300a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003132:	f000 fa95 	bl	8003660 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003136:	f000 fddb 	bl	8003cf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800313a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800313c:	4618      	mov	r0, r3
 800313e:	3738      	adds	r7, #56	; 0x38
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b090      	sub	sp, #64	; 0x40
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d103      	bne.n	8003184 <xQueueGenericSendFromISR+0x3c>
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <xQueueGenericSendFromISR+0x40>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <xQueueGenericSendFromISR+0x42>
 8003188:	2300      	movs	r3, #0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031a0:	bf00      	nop
 80031a2:	e7fe      	b.n	80031a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d103      	bne.n	80031b2 <xQueueGenericSendFromISR+0x6a>
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <xQueueGenericSendFromISR+0x6e>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <xQueueGenericSendFromISR+0x70>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	623b      	str	r3, [r7, #32]
}
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031d2:	f001 ffa9 	bl	8005128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031d6:	f3ef 8211 	mrs	r2, BASEPRI
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	61fa      	str	r2, [r7, #28]
 80031ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d302      	bcc.n	8003204 <xQueueGenericSendFromISR+0xbc>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d12f      	bne.n	8003264 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800320a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800321a:	f000 f991 	bl	8003540 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800321e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d112      	bne.n	800324e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d016      	beq.n	800325e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	3324      	adds	r3, #36	; 0x24
 8003234:	4618      	mov	r0, r3
 8003236:	f000 ff77 	bl	8004128 <xTaskRemoveFromEventList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00e      	beq.n	800325e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e007      	b.n	800325e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800324e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003252:	3301      	adds	r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	b25a      	sxtb	r2, r3
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800325e:	2301      	movs	r3, #1
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003262:	e001      	b.n	8003268 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003264:	2300      	movs	r3, #0
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003272:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003276:	4618      	mov	r0, r3
 8003278:	3740      	adds	r7, #64	; 0x40
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800328c:	2300      	movs	r3, #0
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <xQueueReceive+0x30>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	623b      	str	r3, [r7, #32]
}
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <xQueueReceive+0x3e>
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <xQueueReceive+0x42>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueReceive+0x44>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <xQueueReceive+0x5e>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	61fb      	str	r3, [r7, #28]
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032de:	f001 f8e5 	bl	80044ac <xTaskGetSchedulerState>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <xQueueReceive+0x6e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <xQueueReceive+0x72>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <xQueueReceive+0x74>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xQueueReceive+0x8e>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	61bb      	str	r3, [r7, #24]
}
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800330e:	f001 fe29 	bl	8004f64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01f      	beq.n	800335e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003322:	f000 f977 	bl	8003614 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	1e5a      	subs	r2, r3, #1
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00f      	beq.n	8003356 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	3310      	adds	r3, #16
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fef4 	bl	8004128 <xTaskRemoveFromEventList>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003346:	4b3d      	ldr	r3, [pc, #244]	; (800343c <xQueueReceive+0x1bc>)
 8003348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003356:	f001 fe35 	bl	8004fc4 <vPortExitCritical>
				return pdPASS;
 800335a:	2301      	movs	r3, #1
 800335c:	e069      	b.n	8003432 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003364:	f001 fe2e 	bl	8004fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003368:	2300      	movs	r3, #0
 800336a:	e062      	b.n	8003432 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003372:	f107 0310 	add.w	r3, r7, #16
 8003376:	4618      	mov	r0, r3
 8003378:	f000 ff3a 	bl	80041f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003380:	f001 fe20 	bl	8004fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003384:	f000 fca6 	bl	8003cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003388:	f001 fdec 	bl	8004f64 <vPortEnterCritical>
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003392:	b25b      	sxtb	r3, r3
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d103      	bne.n	80033a2 <xQueueReceive+0x122>
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d103      	bne.n	80033b8 <xQueueReceive+0x138>
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b8:	f001 fe04 	bl	8004fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033bc:	1d3a      	adds	r2, r7, #4
 80033be:	f107 0310 	add.w	r3, r7, #16
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 ff29 	bl	800421c <xTaskCheckForTimeOut>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d123      	bne.n	8003418 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033d2:	f000 f997 	bl	8003704 <prvIsQueueEmpty>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d017      	beq.n	800340c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	3324      	adds	r3, #36	; 0x24
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fe4f 	bl	8004088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ec:	f000 f938 	bl	8003660 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033f0:	f000 fc7e 	bl	8003cf0 <xTaskResumeAll>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d189      	bne.n	800330e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <xQueueReceive+0x1bc>)
 80033fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	e780      	b.n	800330e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800340c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800340e:	f000 f927 	bl	8003660 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003412:	f000 fc6d 	bl	8003cf0 <xTaskResumeAll>
 8003416:	e77a      	b.n	800330e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341a:	f000 f921 	bl	8003660 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800341e:	f000 fc67 	bl	8003cf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003424:	f000 f96e 	bl	8003704 <prvIsQueueEmpty>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f43f af6f 	beq.w	800330e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003432:	4618      	mov	r0, r3
 8003434:	3730      	adds	r7, #48	; 0x30
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	e000ed04 	.word	0xe000ed04

08003440 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	; 0x38
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	623b      	str	r3, [r7, #32]
}
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <xQueueReceiveFromISR+0x3a>
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <xQueueReceiveFromISR+0x3e>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <xQueueReceiveFromISR+0x40>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	61fb      	str	r3, [r7, #28]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800349a:	f001 fe45 	bl	8005128 <vPortValidateInterruptPriority>
	__asm volatile
 800349e:	f3ef 8211 	mrs	r2, BASEPRI
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	61ba      	str	r2, [r7, #24]
 80034b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d02f      	beq.n	8003526 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d4:	f000 f89e 	bl	8003614 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80034e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d112      	bne.n	8003510 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	3310      	adds	r3, #16
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fe16 	bl	8004128 <xTaskRemoveFromEventList>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e007      	b.n	8003520 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003514:	3301      	adds	r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	b25a      	sxtb	r2, r3
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003520:	2301      	movs	r3, #1
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	e001      	b.n	800352a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003526:	2300      	movs	r3, #0
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f383 8811 	msr	BASEPRI, r3
}
 8003534:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003538:	4618      	mov	r0, r3
 800353a:	3738      	adds	r7, #56	; 0x38
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10d      	bne.n	800357a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d14d      	bne.n	8003602 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 ffbc 	bl	80044e8 <xTaskPriorityDisinherit>
 8003570:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	e043      	b.n	8003602 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d119      	bne.n	80035b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6858      	ldr	r0, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	461a      	mov	r2, r3
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	f002 f840 	bl	8005610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	441a      	add	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d32b      	bcc.n	8003602 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	e026      	b.n	8003602 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68d8      	ldr	r0, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	461a      	mov	r2, r3
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	f002 f826 	bl	8005610 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	425b      	negs	r3, r3
 80035ce:	441a      	add	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d207      	bcs.n	80035f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	425b      	negs	r3, r3
 80035ea:	441a      	add	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d105      	bne.n	8003602 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	3b01      	subs	r3, #1
 8003600:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800360a:	697b      	ldr	r3, [r7, #20]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d018      	beq.n	8003658 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	441a      	add	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	d303      	bcc.n	8003648 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68d9      	ldr	r1, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	461a      	mov	r2, r3
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	f001 ffdc 	bl	8005610 <memcpy>
	}
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003668:	f001 fc7c 	bl	8004f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003672:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003674:	e011      	b.n	800369a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3324      	adds	r3, #36	; 0x24
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fd50 	bl	8004128 <xTaskRemoveFromEventList>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800368e:	f000 fe27 	bl	80042e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	3b01      	subs	r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dce9      	bgt.n	8003676 <prvUnlockQueue+0x16>
 80036a2:	e000      	b.n	80036a6 <prvUnlockQueue+0x46>
					break;
 80036a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036ae:	f001 fc89 	bl	8004fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036b2:	f001 fc57 	bl	8004f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036be:	e011      	b.n	80036e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3310      	adds	r3, #16
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd2b 	bl	8004128 <xTaskRemoveFromEventList>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036d8:	f000 fe02 	bl	80042e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036dc:	7bbb      	ldrb	r3, [r7, #14]
 80036de:	3b01      	subs	r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	dce9      	bgt.n	80036c0 <prvUnlockQueue+0x60>
 80036ec:	e000      	b.n	80036f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036f8:	f001 fc64 	bl	8004fc4 <vPortExitCritical>
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800370c:	f001 fc2a 	bl	8004f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003718:	2301      	movs	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e001      	b.n	8003722 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003722:	f001 fc4f 	bl	8004fc4 <vPortExitCritical>

	return xReturn;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003738:	f001 fc14 	bl	8004f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	429a      	cmp	r2, r3
 8003746:	d102      	bne.n	800374e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003748:	2301      	movs	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e001      	b.n	8003752 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003752:	f001 fc37 	bl	8004fc4 <vPortExitCritical>

	return xReturn;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e014      	b.n	800379a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <vQueueAddToRegistry+0x50>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800377c:	490c      	ldr	r1, [pc, #48]	; (80037b0 <vQueueAddToRegistry+0x50>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <vQueueAddToRegistry+0x50>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003792:	e006      	b.n	80037a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b07      	cmp	r3, #7
 800379e:	d9e7      	bls.n	8003770 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000878 	.word	0x20000878

080037b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037c4:	f001 fbce 	bl	8004f64 <vPortEnterCritical>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d103      	bne.n	80037de <vQueueWaitForMessageRestricted+0x2a>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d103      	bne.n	80037f4 <vQueueWaitForMessageRestricted+0x40>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f4:	f001 fbe6 	bl	8004fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3324      	adds	r3, #36	; 0x24
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fc61 	bl	80040d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff ff26 	bl	8003660 <prvUnlockQueue>
	}
 8003814:	bf00      	nop
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af04      	add	r7, sp, #16
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	623b      	str	r3, [r7, #32]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xTaskCreateStatic+0x46>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61fb      	str	r3, [r7, #28]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003862:	23bc      	movs	r3, #188	; 0xbc
 8003864:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2bbc      	cmp	r3, #188	; 0xbc
 800386a:	d00a      	beq.n	8003882 <xTaskCreateStatic+0x66>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	61bb      	str	r3, [r7, #24]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003882:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01e      	beq.n	80038c8 <xTaskCreateStatic+0xac>
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01b      	beq.n	80038c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003898:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	2202      	movs	r2, #2
 800389e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038a2:	2300      	movs	r3, #0
 80038a4:	9303      	str	r3, [sp, #12]
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	9302      	str	r3, [sp, #8]
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f850 	bl	8003960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c2:	f000 f8f3 	bl	8003aac <prvAddNewTaskToReadyList>
 80038c6:	e001      	b.n	80038cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038cc:	697b      	ldr	r3, [r7, #20]
	}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b08c      	sub	sp, #48	; 0x30
 80038da:	af04      	add	r7, sp, #16
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fc5c 	bl	80051a8 <pvPortMalloc>
 80038f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00e      	beq.n	8003916 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038f8:	20bc      	movs	r0, #188	; 0xbc
 80038fa:	f001 fc55 	bl	80051a8 <pvPortMalloc>
 80038fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
 800390c:	e005      	b.n	800391a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f001 fd16 	bl	8005340 <vPortFree>
 8003914:	e001      	b.n	800391a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	2300      	movs	r3, #0
 800392c:	9303      	str	r3, [sp, #12]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	9302      	str	r3, [sp, #8]
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f80e 	bl	8003960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003944:	69f8      	ldr	r0, [r7, #28]
 8003946:	f000 f8b1 	bl	8003aac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800394a:	2301      	movs	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e002      	b.n	8003956 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003956:	69bb      	ldr	r3, [r7, #24]
	}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	461a      	mov	r2, r3
 8003978:	21a5      	movs	r1, #165	; 0xa5
 800397a:	f001 fe57 	bl	800562c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003988:	3b01      	subs	r3, #1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f023 0307 	bic.w	r3, r3, #7
 8003996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	617b      	str	r3, [r7, #20]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01f      	beq.n	80039fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e012      	b.n	80039ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	7819      	ldrb	r1, [r3, #0]
 80039cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	3334      	adds	r3, #52	; 0x34
 80039d4:	460a      	mov	r2, r1
 80039d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b0f      	cmp	r3, #15
 80039ee:	d9e9      	bls.n	80039c4 <prvInitialiseNewTask+0x64>
 80039f0:	e000      	b.n	80039f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80039f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039fc:	e003      	b.n	8003a06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2b37      	cmp	r3, #55	; 0x37
 8003a0a:	d901      	bls.n	8003a10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a0c:	2337      	movs	r3, #55	; 0x37
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	2200      	movs	r2, #0
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	3304      	adds	r3, #4
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f872 	bl	8002b10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	3318      	adds	r3, #24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff f86d 	bl	8002b10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	3354      	adds	r3, #84	; 0x54
 8003a60:	2260      	movs	r2, #96	; 0x60
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 fde1 	bl	800562c <memset>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	4a0c      	ldr	r2, [pc, #48]	; (8003aa0 <prvInitialiseNewTask+0x140>)
 8003a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <prvInitialiseNewTask+0x144>)
 8003a74:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <prvInitialiseNewTask+0x148>)
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	69b8      	ldr	r0, [r7, #24]
 8003a82:	f001 f941 	bl	8004d08 <pxPortInitialiseStack>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a98:	bf00      	nop
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	08005ff8 	.word	0x08005ff8
 8003aa4:	08006018 	.word	0x08006018
 8003aa8:	08005fd8 	.word	0x08005fd8

08003aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ab4:	f001 fa56 	bl	8004f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <prvAddNewTaskToReadyList+0xc4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <prvAddNewTaskToReadyList+0xc4>)
 8003ac0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ac2:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <prvAddNewTaskToReadyList+0xc8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aca:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <prvAddNewTaskToReadyList+0xc8>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <prvAddNewTaskToReadyList+0xc4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d110      	bne.n	8003afa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ad8:	f000 fc26 	bl	8004328 <prvInitialiseTaskLists>
 8003adc:	e00d      	b.n	8003afa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <prvAddNewTaskToReadyList+0xcc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ae6:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <prvAddNewTaskToReadyList+0xc8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d802      	bhi.n	8003afa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <prvAddNewTaskToReadyList+0xc8>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <prvAddNewTaskToReadyList+0xd0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <prvAddNewTaskToReadyList+0xd0>)
 8003b02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <prvAddNewTaskToReadyList+0xd0>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <prvAddNewTaskToReadyList+0xd4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d903      	bls.n	8003b20 <prvAddNewTaskToReadyList+0x74>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <prvAddNewTaskToReadyList+0xd4>)
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <prvAddNewTaskToReadyList+0xd8>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f7fe fff7 	bl	8002b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b3c:	f001 fa42 	bl	8004fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <prvAddNewTaskToReadyList+0xcc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <prvAddNewTaskToReadyList+0xc8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d207      	bcs.n	8003b66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <prvAddNewTaskToReadyList+0xdc>)
 8003b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000d8c 	.word	0x20000d8c
 8003b74:	200008b8 	.word	0x200008b8
 8003b78:	20000d98 	.word	0x20000d98
 8003b7c:	20000da8 	.word	0x20000da8
 8003b80:	20000d94 	.word	0x20000d94
 8003b84:	200008bc 	.word	0x200008bc
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d017      	beq.n	8003bce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <vTaskDelay+0x60>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <vTaskDelay+0x30>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	60bb      	str	r3, [r7, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	e7fe      	b.n	8003bba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bbc:	f000 f88a 	bl	8003cd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fcfe 	bl	80045c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bc8:	f000 f892 	bl	8003cf0 <xTaskResumeAll>
 8003bcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d107      	bne.n	8003be4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <vTaskDelay+0x64>)
 8003bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000db4 	.word	0x20000db4
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c02:	463a      	mov	r2, r7
 8003c04:	1d39      	adds	r1, r7, #4
 8003c06:	f107 0308 	add.w	r3, r7, #8
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe ff2c 	bl	8002a68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	9202      	str	r2, [sp, #8]
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	460a      	mov	r2, r1
 8003c22:	4924      	ldr	r1, [pc, #144]	; (8003cb4 <vTaskStartScheduler+0xc0>)
 8003c24:	4824      	ldr	r0, [pc, #144]	; (8003cb8 <vTaskStartScheduler+0xc4>)
 8003c26:	f7ff fdf9 	bl	800381c <xTaskCreateStatic>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4a23      	ldr	r2, [pc, #140]	; (8003cbc <vTaskStartScheduler+0xc8>)
 8003c2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c30:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <vTaskStartScheduler+0xc8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e001      	b.n	8003c42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c48:	f000 fd10 	bl	800466c <xTimerCreateTimerTask>
 8003c4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d11b      	bne.n	8003c8c <vTaskStartScheduler+0x98>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	613b      	str	r3, [r7, #16]
}
 8003c66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c68:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <vTaskStartScheduler+0xcc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3354      	adds	r3, #84	; 0x54
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <vTaskStartScheduler+0xd0>)
 8003c70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <vTaskStartScheduler+0xd4>)
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <vTaskStartScheduler+0xd8>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <vTaskStartScheduler+0xdc>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c86:	f001 f8cb 	bl	8004e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c8a:	e00e      	b.n	8003caa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d10a      	bne.n	8003caa <vTaskStartScheduler+0xb6>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60fb      	str	r3, [r7, #12]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <vTaskStartScheduler+0xb4>
}
 8003caa:	bf00      	nop
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	08005f14 	.word	0x08005f14
 8003cb8:	080042f9 	.word	0x080042f9
 8003cbc:	20000db0 	.word	0x20000db0
 8003cc0:	200008b8 	.word	0x200008b8
 8003cc4:	20000018 	.word	0x20000018
 8003cc8:	20000dac 	.word	0x20000dac
 8003ccc:	20000d98 	.word	0x20000d98
 8003cd0:	20000d90 	.word	0x20000d90

08003cd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <vTaskSuspendAll+0x18>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	4a03      	ldr	r2, [pc, #12]	; (8003cec <vTaskSuspendAll+0x18>)
 8003ce0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	20000db4 	.word	0x20000db4

08003cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cfe:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <xTaskResumeAll+0x118>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <xTaskResumeAll+0x2c>
	__asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	603b      	str	r3, [r7, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	e7fe      	b.n	8003d1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d1c:	f001 f922 	bl	8004f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d20:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <xTaskResumeAll+0x118>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	4a38      	ldr	r2, [pc, #224]	; (8003e08 <xTaskResumeAll+0x118>)
 8003d28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d2a:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <xTaskResumeAll+0x118>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d162      	bne.n	8003df8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d32:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <xTaskResumeAll+0x11c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d05e      	beq.n	8003df8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d3a:	e02f      	b.n	8003d9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d3c:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <xTaskResumeAll+0x120>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3318      	adds	r3, #24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe ff4b 	bl	8002be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe ff46 	bl	8002be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	4b2d      	ldr	r3, [pc, #180]	; (8003e14 <xTaskResumeAll+0x124>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d903      	bls.n	8003d6c <xTaskResumeAll+0x7c>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <xTaskResumeAll+0x124>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <xTaskResumeAll+0x128>)
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f7fe fed1 	bl	8002b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <xTaskResumeAll+0x12c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d302      	bcc.n	8003d9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <xTaskResumeAll+0x130>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <xTaskResumeAll+0x120>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1cb      	bne.n	8003d3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003daa:	f000 fb5f 	bl	800446c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <xTaskResumeAll+0x134>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dba:	f000 f847 	bl	8003e4c <xTaskIncrementTick>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dc4:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <xTaskResumeAll+0x130>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f1      	bne.n	8003dba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <xTaskResumeAll+0x134>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <xTaskResumeAll+0x130>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <xTaskResumeAll+0x138>)
 8003dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003df8:	f001 f8e4 	bl	8004fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000db4 	.word	0x20000db4
 8003e0c:	20000d8c 	.word	0x20000d8c
 8003e10:	20000d4c 	.word	0x20000d4c
 8003e14:	20000d94 	.word	0x20000d94
 8003e18:	200008bc 	.word	0x200008bc
 8003e1c:	200008b8 	.word	0x200008b8
 8003e20:	20000da0 	.word	0x20000da0
 8003e24:	20000d9c 	.word	0x20000d9c
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <xTaskGetTickCount+0x1c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000d90 	.word	0x20000d90

08003e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e56:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <xTaskIncrementTick+0x148>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 808f 	bne.w	8003f7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <xTaskIncrementTick+0x14c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e68:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <xTaskIncrementTick+0x14c>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d120      	bne.n	8003eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e74:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	603b      	str	r3, [r7, #0]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xTaskIncrementTick+0x46>
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a3f      	ldr	r2, [pc, #252]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <xTaskIncrementTick+0x158>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <xTaskIncrementTick+0x158>)
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	f000 fadb 	bl	800446c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d349      	bcc.n	8003f54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	601a      	str	r2, [r3, #0]
					break;
 8003ed2:	e03f      	b.n	8003f54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed4:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d203      	bcs.n	8003ef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003eec:	4a2e      	ldr	r2, [pc, #184]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ef2:	e02f      	b.n	8003f54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fe73 	bl	8002be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	3318      	adds	r3, #24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fe6a 	bl	8002be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <xTaskIncrementTick+0x160>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d903      	bls.n	8003f24 <xTaskIncrementTick+0xd8>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <xTaskIncrementTick+0x160>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <xTaskIncrementTick+0x164>)
 8003f32:	441a      	add	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe fdf5 	bl	8002b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <xTaskIncrementTick+0x168>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d3b8      	bcc.n	8003ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f52:	e7b5      	b.n	8003ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f54:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <xTaskIncrementTick+0x168>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4915      	ldr	r1, [pc, #84]	; (8003fb0 <xTaskIncrementTick+0x164>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d901      	bls.n	8003f70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <xTaskIncrementTick+0x16c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e004      	b.n	8003f88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <xTaskIncrementTick+0x170>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <xTaskIncrementTick+0x170>)
 8003f86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f88:	697b      	ldr	r3, [r7, #20]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000db4 	.word	0x20000db4
 8003f98:	20000d90 	.word	0x20000d90
 8003f9c:	20000d44 	.word	0x20000d44
 8003fa0:	20000d48 	.word	0x20000d48
 8003fa4:	20000da4 	.word	0x20000da4
 8003fa8:	20000dac 	.word	0x20000dac
 8003fac:	20000d94 	.word	0x20000d94
 8003fb0:	200008bc 	.word	0x200008bc
 8003fb4:	200008b8 	.word	0x200008b8
 8003fb8:	20000da0 	.word	0x20000da0
 8003fbc:	20000d9c 	.word	0x20000d9c

08003fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <vTaskSwitchContext+0xb0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <vTaskSwitchContext+0xb4>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fd4:	e046      	b.n	8004064 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <vTaskSwitchContext+0xb4>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fdc:	4b26      	ldr	r3, [pc, #152]	; (8004078 <vTaskSwitchContext+0xb8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e010      	b.n	8004006 <vTaskSwitchContext+0x46>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	607b      	str	r3, [r7, #4]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vTaskSwitchContext+0x3e>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	491d      	ldr	r1, [pc, #116]	; (800407c <vTaskSwitchContext+0xbc>)
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0e4      	beq.n	8003fe4 <vTaskSwitchContext+0x24>
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <vTaskSwitchContext+0xbc>)
 8004026:	4413      	add	r3, r2
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3308      	adds	r3, #8
 800403c:	429a      	cmp	r2, r3
 800403e:	d104      	bne.n	800404a <vTaskSwitchContext+0x8a>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <vTaskSwitchContext+0xc0>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4a08      	ldr	r2, [pc, #32]	; (8004078 <vTaskSwitchContext+0xb8>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <vTaskSwitchContext+0xc0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3354      	adds	r3, #84	; 0x54
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <vTaskSwitchContext+0xc4>)
 8004062:	6013      	str	r3, [r2, #0]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	20000db4 	.word	0x20000db4
 8004074:	20000da0 	.word	0x20000da0
 8004078:	20000d94 	.word	0x20000d94
 800407c:	200008bc 	.word	0x200008bc
 8004080:	200008b8 	.word	0x200008b8
 8004084:	20000018 	.word	0x20000018

08004088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	60fb      	str	r3, [r7, #12]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <vTaskPlaceOnEventList+0x44>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3318      	adds	r3, #24
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fe fd5b 	bl	8002b72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040bc:	2101      	movs	r1, #1
 80040be:	6838      	ldr	r0, [r7, #0]
 80040c0:	f000 fa80 	bl	80045c4 <prvAddCurrentTaskToDelayedList>
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	200008b8 	.word	0x200008b8

080040d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	617b      	str	r3, [r7, #20]
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <vTaskPlaceOnEventListRestricted+0x54>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3318      	adds	r3, #24
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7fe fd12 	bl	8002b2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800410c:	f04f 33ff 	mov.w	r3, #4294967295
 8004110:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	68b8      	ldr	r0, [r7, #8]
 8004116:	f000 fa55 	bl	80045c4 <prvAddCurrentTaskToDelayedList>
	}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200008b8 	.word	0x200008b8

08004128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	60fb      	str	r3, [r7, #12]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fd43 	bl	8002be4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <xTaskRemoveFromEventList+0xb0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11d      	bne.n	80041a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3304      	adds	r3, #4
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd3a 	bl	8002be4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <xTaskRemoveFromEventList+0xb4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d903      	bls.n	8004184 <xTaskRemoveFromEventList+0x5c>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4a16      	ldr	r2, [pc, #88]	; (80041dc <xTaskRemoveFromEventList+0xb4>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <xTaskRemoveFromEventList+0xb8>)
 8004192:	441a      	add	r2, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f7fe fcc5 	bl	8002b2a <vListInsertEnd>
 80041a0:	e005      	b.n	80041ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3318      	adds	r3, #24
 80041a6:	4619      	mov	r1, r3
 80041a8:	480e      	ldr	r0, [pc, #56]	; (80041e4 <xTaskRemoveFromEventList+0xbc>)
 80041aa:	f7fe fcbe 	bl	8002b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <xTaskRemoveFromEventList+0xc0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d905      	bls.n	80041c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <xTaskRemoveFromEventList+0xc4>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e001      	b.n	80041cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041cc:	697b      	ldr	r3, [r7, #20]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000db4 	.word	0x20000db4
 80041dc:	20000d94 	.word	0x20000d94
 80041e0:	200008bc 	.word	0x200008bc
 80041e4:	20000d4c 	.word	0x20000d4c
 80041e8:	200008b8 	.word	0x200008b8
 80041ec:	20000da0 	.word	0x20000da0

080041f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <vTaskInternalSetTimeOutState+0x24>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <vTaskInternalSetTimeOutState+0x28>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	20000da4 	.word	0x20000da4
 8004218:	20000d90 	.word	0x20000d90

0800421c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	613b      	str	r3, [r7, #16]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	60fb      	str	r3, [r7, #12]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800425e:	f000 fe81 	bl	8004f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <xTaskCheckForTimeOut+0xbc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d102      	bne.n	8004282 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e023      	b.n	80042ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <xTaskCheckForTimeOut+0xc0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d007      	beq.n	800429e <xTaskCheckForTimeOut+0x82>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e015      	b.n	80042ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d20b      	bcs.n	80042c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff9b 	bl	80041f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	e004      	b.n	80042ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042ca:	f000 fe7b 	bl	8004fc4 <vPortExitCritical>

	return xReturn;
 80042ce:	69fb      	ldr	r3, [r7, #28]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000d90 	.word	0x20000d90
 80042dc:	20000da4 	.word	0x20000da4

080042e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <vTaskMissedYield+0x14>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	20000da0 	.word	0x20000da0

080042f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004300:	f000 f852 	bl	80043a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <prvIdleTask+0x28>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d9f9      	bls.n	8004300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <prvIdleTask+0x2c>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800431c:	e7f0      	b.n	8004300 <prvIdleTask+0x8>
 800431e:	bf00      	nop
 8004320:	200008bc 	.word	0x200008bc
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	e00c      	b.n	800434e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <prvInitialiseTaskLists+0x60>)
 8004340:	4413      	add	r3, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fbc4 	bl	8002ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3301      	adds	r3, #1
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b37      	cmp	r3, #55	; 0x37
 8004352:	d9ef      	bls.n	8004334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004354:	480d      	ldr	r0, [pc, #52]	; (800438c <prvInitialiseTaskLists+0x64>)
 8004356:	f7fe fbbb 	bl	8002ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800435a:	480d      	ldr	r0, [pc, #52]	; (8004390 <prvInitialiseTaskLists+0x68>)
 800435c:	f7fe fbb8 	bl	8002ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004360:	480c      	ldr	r0, [pc, #48]	; (8004394 <prvInitialiseTaskLists+0x6c>)
 8004362:	f7fe fbb5 	bl	8002ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004366:	480c      	ldr	r0, [pc, #48]	; (8004398 <prvInitialiseTaskLists+0x70>)
 8004368:	f7fe fbb2 	bl	8002ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800436c:	480b      	ldr	r0, [pc, #44]	; (800439c <prvInitialiseTaskLists+0x74>)
 800436e:	f7fe fbaf 	bl	8002ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <prvInitialiseTaskLists+0x78>)
 8004374:	4a05      	ldr	r2, [pc, #20]	; (800438c <prvInitialiseTaskLists+0x64>)
 8004376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <prvInitialiseTaskLists+0x7c>)
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <prvInitialiseTaskLists+0x68>)
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200008bc 	.word	0x200008bc
 800438c:	20000d1c 	.word	0x20000d1c
 8004390:	20000d30 	.word	0x20000d30
 8004394:	20000d4c 	.word	0x20000d4c
 8004398:	20000d60 	.word	0x20000d60
 800439c:	20000d78 	.word	0x20000d78
 80043a0:	20000d44 	.word	0x20000d44
 80043a4:	20000d48 	.word	0x20000d48

080043a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ae:	e019      	b.n	80043e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043b0:	f000 fdd8 	bl	8004f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b4:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <prvCheckTasksWaitingTermination+0x50>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe fc0f 	bl	8002be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <prvCheckTasksWaitingTermination+0x54>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <prvCheckTasksWaitingTermination+0x54>)
 80043ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <prvCheckTasksWaitingTermination+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <prvCheckTasksWaitingTermination+0x58>)
 80043d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043da:	f000 fdf3 	bl	8004fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f810 	bl	8004404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <prvCheckTasksWaitingTermination+0x58>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e1      	bne.n	80043b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000d60 	.word	0x20000d60
 80043fc:	20000d8c 	.word	0x20000d8c
 8004400:	20000d74 	.word	0x20000d74

08004404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3354      	adds	r3, #84	; 0x54
 8004410:	4618      	mov	r0, r3
 8004412:	f001 f921 	bl	8005658 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800441c:	2b00      	cmp	r3, #0
 800441e:	d108      	bne.n	8004432 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4618      	mov	r0, r3
 8004426:	f000 ff8b 	bl	8005340 <vPortFree>
				vPortFree( pxTCB );
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 ff88 	bl	8005340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004430:	e018      	b.n	8004464 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004438:	2b01      	cmp	r3, #1
 800443a:	d103      	bne.n	8004444 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 ff7f 	bl	8005340 <vPortFree>
	}
 8004442:	e00f      	b.n	8004464 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800444a:	2b02      	cmp	r3, #2
 800444c:	d00a      	beq.n	8004464 <prvDeleteTCB+0x60>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60fb      	str	r3, [r7, #12]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <prvDeleteTCB+0x5e>
	}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <prvResetNextTaskUnblockTime+0x38>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <prvResetNextTaskUnblockTime+0x3c>)
 800447e:	f04f 32ff 	mov.w	r2, #4294967295
 8004482:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004484:	e008      	b.n	8004498 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <prvResetNextTaskUnblockTime+0x38>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004496:	6013      	str	r3, [r2, #0]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	20000d44 	.word	0x20000d44
 80044a8:	20000dac 	.word	0x20000dac

080044ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <xTaskGetSchedulerState+0x34>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044ba:	2301      	movs	r3, #1
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	e008      	b.n	80044d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <xTaskGetSchedulerState+0x38>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044c8:	2302      	movs	r3, #2
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	e001      	b.n	80044d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044d2:	687b      	ldr	r3, [r7, #4]
	}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	20000d98 	.word	0x20000d98
 80044e4:	20000db4 	.word	0x20000db4

080044e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d056      	beq.n	80045ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044fe:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <xTaskPriorityDisinherit+0xd0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	429a      	cmp	r2, r3
 8004506:	d00a      	beq.n	800451e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004540:	1e5a      	subs	r2, r3, #1
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	429a      	cmp	r2, r3
 8004550:	d02c      	beq.n	80045ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	d128      	bne.n	80045ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fb40 	bl	8002be4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <xTaskPriorityDisinherit+0xd4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d903      	bls.n	800458c <xTaskPriorityDisinherit+0xa4>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <xTaskPriorityDisinherit+0xd4>)
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <xTaskPriorityDisinherit+0xd8>)
 800459a:	441a      	add	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f7fe fac1 	bl	8002b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045ac:	697b      	ldr	r3, [r7, #20]
	}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200008b8 	.word	0x200008b8
 80045bc:	20000d94 	.word	0x20000d94
 80045c0:	200008bc 	.word	0x200008bc

080045c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ce:	4b21      	ldr	r3, [pc, #132]	; (8004654 <prvAddCurrentTaskToDelayedList+0x90>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045d4:	4b20      	ldr	r3, [pc, #128]	; (8004658 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3304      	adds	r3, #4
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fb02 	bl	8002be4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d10a      	bne.n	80045fe <prvAddCurrentTaskToDelayedList+0x3a>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ee:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4819      	ldr	r0, [pc, #100]	; (800465c <prvAddCurrentTaskToDelayedList+0x98>)
 80045f8:	f7fe fa97 	bl	8002b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045fc:	e026      	b.n	800464c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4413      	add	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <prvAddCurrentTaskToDelayedList+0x94>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	429a      	cmp	r2, r3
 8004614:	d209      	bcs.n	800462a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <prvAddCurrentTaskToDelayedList+0x94>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7fe faa5 	bl	8002b72 <vListInsert>
}
 8004628:	e010      	b.n	800464c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <prvAddCurrentTaskToDelayedList+0xa0>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <prvAddCurrentTaskToDelayedList+0x94>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fe fa9b 	bl	8002b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <prvAddCurrentTaskToDelayedList+0xa4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	429a      	cmp	r2, r3
 8004644:	d202      	bcs.n	800464c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6013      	str	r3, [r2, #0]
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000d90 	.word	0x20000d90
 8004658:	200008b8 	.word	0x200008b8
 800465c:	20000d78 	.word	0x20000d78
 8004660:	20000d48 	.word	0x20000d48
 8004664:	20000d44 	.word	0x20000d44
 8004668:	20000dac 	.word	0x20000dac

0800466c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004676:	f000 fb07 	bl	8004c88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800467a:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <xTimerCreateTimerTask+0x80>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d021      	beq.n	80046c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800468a:	1d3a      	adds	r2, r7, #4
 800468c:	f107 0108 	add.w	r1, r7, #8
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fa01 	bl	8002a9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	9202      	str	r2, [sp, #8]
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	2302      	movs	r3, #2
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2300      	movs	r3, #0
 80046aa:	460a      	mov	r2, r1
 80046ac:	4910      	ldr	r1, [pc, #64]	; (80046f0 <xTimerCreateTimerTask+0x84>)
 80046ae:	4811      	ldr	r0, [pc, #68]	; (80046f4 <xTimerCreateTimerTask+0x88>)
 80046b0:	f7ff f8b4 	bl	800381c <xTaskCreateStatic>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4a10      	ldr	r2, [pc, #64]	; (80046f8 <xTimerCreateTimerTask+0x8c>)
 80046b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <xTimerCreateTimerTask+0x8c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046c2:	2301      	movs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	613b      	str	r3, [r7, #16]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046e2:	697b      	ldr	r3, [r7, #20]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000de8 	.word	0x20000de8
 80046f0:	08005f1c 	.word	0x08005f1c
 80046f4:	08004831 	.word	0x08004831
 80046f8:	20000dec 	.word	0x20000dec

080046fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800470a:	2300      	movs	r3, #0
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	623b      	str	r3, [r7, #32]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800472a:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <xTimerGenericCommand+0x98>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d02a      	beq.n	8004788 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b05      	cmp	r3, #5
 8004742:	dc18      	bgt.n	8004776 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004744:	f7ff feb2 	bl	80044ac <xTaskGetSchedulerState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b02      	cmp	r3, #2
 800474c:	d109      	bne.n	8004762 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <xTimerGenericCommand+0x98>)
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	f107 0110 	add.w	r1, r7, #16
 8004756:	2300      	movs	r3, #0
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	f7fe fbf7 	bl	8002f4c <xQueueGenericSend>
 800475e:	6278      	str	r0, [r7, #36]	; 0x24
 8004760:	e012      	b.n	8004788 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <xTimerGenericCommand+0x98>)
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	f107 0110 	add.w	r1, r7, #16
 800476a:	2300      	movs	r3, #0
 800476c:	2200      	movs	r2, #0
 800476e:	f7fe fbed 	bl	8002f4c <xQueueGenericSend>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24
 8004774:	e008      	b.n	8004788 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <xTimerGenericCommand+0x98>)
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	f107 0110 	add.w	r1, r7, #16
 800477e:	2300      	movs	r3, #0
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	f7fe fce1 	bl	8003148 <xQueueGenericSendFromISR>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800478a:	4618      	mov	r0, r3
 800478c:	3728      	adds	r7, #40	; 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000de8 	.word	0x20000de8

08004798 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <prvProcessExpiredTimer+0x94>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fa17 	bl	8002be4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d022      	beq.n	800480a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	18d1      	adds	r1, r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	6978      	ldr	r0, [r7, #20]
 80047d2:	f000 f8d1 	bl	8004978 <prvInsertTimerInActiveList>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01f      	beq.n	800481c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047dc:	2300      	movs	r3, #0
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2300      	movs	r3, #0
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	2100      	movs	r1, #0
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	f7ff ff88 	bl	80046fc <xTimerGenericCommand>
 80047ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d113      	bne.n	800481c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	60fb      	str	r3, [r7, #12]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	b2da      	uxtb	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	4798      	blx	r3
}
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000de0 	.word	0x20000de0

08004830 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004838:	f107 0308 	add.w	r3, r7, #8
 800483c:	4618      	mov	r0, r3
 800483e:	f000 f857 	bl	80048f0 <prvGetNextExpireTime>
 8004842:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4619      	mov	r1, r3
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f803 	bl	8004854 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800484e:	f000 f8d5 	bl	80049fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004852:	e7f1      	b.n	8004838 <prvTimerTask+0x8>

08004854 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800485e:	f7ff fa39 	bl	8003cd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f866 	bl	8004938 <prvSampleTimeNow>
 800486c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d130      	bne.n	80048d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <prvProcessTimerOrBlockTask+0x3c>
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	429a      	cmp	r2, r3
 8004880:	d806      	bhi.n	8004890 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004882:	f7ff fa35 	bl	8003cf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff85 	bl	8004798 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800488e:	e024      	b.n	80048da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004896:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <prvProcessTimerOrBlockTask+0x90>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <prvProcessTimerOrBlockTask+0x50>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <prvProcessTimerOrBlockTask+0x52>
 80048a4:	2300      	movs	r3, #0
 80048a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <prvProcessTimerOrBlockTask+0x94>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	f7fe ff7d 	bl	80037b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048ba:	f7ff fa19 	bl	8003cf0 <xTaskResumeAll>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <prvProcessTimerOrBlockTask+0x98>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
}
 80048d4:	e001      	b.n	80048da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048d6:	f7ff fa0b 	bl	8003cf0 <xTaskResumeAll>
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000de4 	.word	0x20000de4
 80048e8:	20000de8 	.word	0x20000de8
 80048ec:	e000ed04 	.word	0xe000ed04

080048f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <prvGetNextExpireTime+0x44>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <prvGetNextExpireTime+0x16>
 8004902:	2201      	movs	r2, #1
 8004904:	e000      	b.n	8004908 <prvGetNextExpireTime+0x18>
 8004906:	2200      	movs	r2, #0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <prvGetNextExpireTime+0x44>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e001      	b.n	8004924 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004924:	68fb      	ldr	r3, [r7, #12]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000de0 	.word	0x20000de0

08004938 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004940:	f7ff fa74 	bl	8003e2c <xTaskGetTickCount>
 8004944:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <prvSampleTimeNow+0x3c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	429a      	cmp	r2, r3
 800494e:	d205      	bcs.n	800495c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004950:	f000 f936 	bl	8004bc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e002      	b.n	8004962 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <prvSampleTimeNow+0x3c>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004968:	68fb      	ldr	r3, [r7, #12]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000df0 	.word	0x20000df0

08004978 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d812      	bhi.n	80049c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e01b      	b.n	80049ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049b2:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <prvInsertTimerInActiveList+0x7c>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fe f8d8 	bl	8002b72 <vListInsert>
 80049c2:	e012      	b.n	80049ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d206      	bcs.n	80049da <prvInsertTimerInActiveList+0x62>
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e007      	b.n	80049ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <prvInsertTimerInActiveList+0x80>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f7fe f8c4 	bl	8002b72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049ea:	697b      	ldr	r3, [r7, #20]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20000de4 	.word	0x20000de4
 80049f8:	20000de0 	.word	0x20000de0

080049fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08e      	sub	sp, #56	; 0x38
 8004a00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a02:	e0ca      	b.n	8004b9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da18      	bge.n	8004a3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a0a:	1d3b      	adds	r3, r7, #4
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	61fb      	str	r3, [r7, #28]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a32:	6850      	ldr	r0, [r2, #4]
 8004a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a36:	6892      	ldr	r2, [r2, #8]
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f2c0 80aa 	blt.w	8004b98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	3304      	adds	r3, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe f8c5 	bl	8002be4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff6b 	bl	8004938 <prvSampleTimeNow>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b09      	cmp	r3, #9
 8004a68:	f200 8097 	bhi.w	8004b9a <prvProcessReceivedCommands+0x19e>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <prvProcessReceivedCommands+0x78>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004a9d 	.word	0x08004a9d
 8004a80:	08004b11 	.word	0x08004b11
 8004a84:	08004b25 	.word	0x08004b25
 8004a88:	08004b6f 	.word	0x08004b6f
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004a9d 	.word	0x08004a9d
 8004a94:	08004b11 	.word	0x08004b11
 8004a98:	08004b25 	.word	0x08004b25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	18d1      	adds	r1, r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004abc:	f7ff ff5c 	bl	8004978 <prvInsertTimerInActiveList>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d069      	beq.n	8004b9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004acc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d05e      	beq.n	8004b9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	441a      	add	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2100      	movs	r1, #0
 8004aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aee:	f7ff fe05 	bl	80046fc <xTimerGenericCommand>
 8004af2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d14f      	bne.n	8004b9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	61bb      	str	r3, [r7, #24]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b22:	e03a      	b.n	8004b9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	617b      	str	r3, [r7, #20]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	18d1      	adds	r1, r2, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b68:	f7ff ff06 	bl	8004978 <prvInsertTimerInActiveList>
					break;
 8004b6c:	e015      	b.n	8004b9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b7e:	f000 fbdf 	bl	8005340 <vPortFree>
 8004b82:	e00a      	b.n	8004b9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b96:	e000      	b.n	8004b9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b9a:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <prvProcessReceivedCommands+0x1c0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	1d39      	adds	r1, r7, #4
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fb6c 	bl	8003280 <xQueueReceive>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f47f af2a 	bne.w	8004a04 <prvProcessReceivedCommands+0x8>
	}
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3730      	adds	r7, #48	; 0x30
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000de8 	.word	0x20000de8

08004bc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bc6:	e048      	b.n	8004c5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd ffff 	bl	8002be4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02e      	beq.n	8004c5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d90e      	bls.n	8004c2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c1a:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7fd ffa4 	bl	8002b72 <vListInsert>
 8004c2a:	e016      	b.n	8004c5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	2100      	movs	r1, #0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fd60 	bl	80046fc <xTimerGenericCommand>
 8004c3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	603b      	str	r3, [r7, #0]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1b1      	bne.n	8004bc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <prvSwitchTimerLists+0xc4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c72:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <prvSwitchTimerLists+0xc4>)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	6013      	str	r3, [r2, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000de0 	.word	0x20000de0
 8004c84:	20000de4 	.word	0x20000de4

08004c88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c8e:	f000 f969 	bl	8004f64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d120      	bne.n	8004cdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c9a:	4814      	ldr	r0, [pc, #80]	; (8004cec <prvCheckForValidListAndQueue+0x64>)
 8004c9c:	f7fd ff18 	bl	8002ad0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ca0:	4813      	ldr	r0, [pc, #76]	; (8004cf0 <prvCheckForValidListAndQueue+0x68>)
 8004ca2:	f7fd ff15 	bl	8002ad0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ca6:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <prvCheckForValidListAndQueue+0x6c>)
 8004ca8:	4a10      	ldr	r2, [pc, #64]	; (8004cec <prvCheckForValidListAndQueue+0x64>)
 8004caa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <prvCheckForValidListAndQueue+0x70>)
 8004cae:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <prvCheckForValidListAndQueue+0x68>)
 8004cb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <prvCheckForValidListAndQueue+0x74>)
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <prvCheckForValidListAndQueue+0x78>)
 8004cba:	2110      	movs	r1, #16
 8004cbc:	200a      	movs	r0, #10
 8004cbe:	f7fe f823 	bl	8002d08 <xQueueGenericCreateStatic>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	490b      	ldr	r1, [pc, #44]	; (8004d04 <prvCheckForValidListAndQueue+0x7c>)
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fd42 	bl	8003760 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cdc:	f000 f972 	bl	8004fc4 <vPortExitCritical>
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000de8 	.word	0x20000de8
 8004cec:	20000db8 	.word	0x20000db8
 8004cf0:	20000dcc 	.word	0x20000dcc
 8004cf4:	20000de0 	.word	0x20000de0
 8004cf8:	20000de4 	.word	0x20000de4
 8004cfc:	20000e94 	.word	0x20000e94
 8004d00:	20000df4 	.word	0x20000df4
 8004d04:	08005f24 	.word	0x08005f24

08004d08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b04      	subs	r3, #4
 8004d18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b04      	subs	r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f023 0201 	bic.w	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d38:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <pxPortInitialiseStack+0x64>)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b14      	subs	r3, #20
 8004d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b04      	subs	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f06f 0202 	mvn.w	r2, #2
 8004d56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b20      	subs	r3, #32
 8004d5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	08004d71 	.word	0x08004d71

08004d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <prvTaskExitError+0x54>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d00a      	beq.n	8004d9a <prvTaskExitError+0x2a>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <prvTaskExitError+0x28>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
}
 8004dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dae:	bf00      	nop
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0fc      	beq.n	8004db0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	20000014 	.word	0x20000014
	...

08004dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <pxCurrentTCBConst2>)
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	6808      	ldr	r0, [r1, #0]
 8004dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	f380 8809 	msr	PSP, r0
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	4770      	bx	lr
 8004dec:	f3af 8000 	nop.w

08004df0 <pxCurrentTCBConst2>:
 8004df0:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004df8:	4808      	ldr	r0, [pc, #32]	; (8004e1c <prvPortStartFirstTask+0x24>)
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	6800      	ldr	r0, [r0, #0]
 8004dfe:	f380 8808 	msr	MSP, r0
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8814 	msr	CONTROL, r0
 8004e0a:	b662      	cpsie	i
 8004e0c:	b661      	cpsie	f
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	df00      	svc	0
 8004e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e1a:	bf00      	nop
 8004e1c:	e000ed08 	.word	0xe000ed08

08004e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e26:	4b46      	ldr	r3, [pc, #280]	; (8004f40 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a46      	ldr	r2, [pc, #280]	; (8004f44 <xPortStartScheduler+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x26>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	613b      	str	r3, [r7, #16]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e46:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <xPortStartScheduler+0x120>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a3f      	ldr	r2, [pc, #252]	; (8004f48 <xPortStartScheduler+0x128>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10a      	bne.n	8004e66 <xPortStartScheduler+0x46>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <xPortStartScheduler+0x130>)
 8004e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e8e:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <xPortStartScheduler+0x134>)
 8004e90:	2207      	movs	r2, #7
 8004e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e94:	e009      	b.n	8004eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e96:	4b2f      	ldr	r3, [pc, #188]	; (8004f54 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	4a2d      	ldr	r2, [pc, #180]	; (8004f54 <xPortStartScheduler+0x134>)
 8004e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b80      	cmp	r3, #128	; 0x80
 8004eb4:	d0ef      	beq.n	8004e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eb6:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <xPortStartScheduler+0x134>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1c3 0307 	rsb	r3, r3, #7
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d00a      	beq.n	8004ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60bb      	str	r3, [r7, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ed8:	4b1e      	ldr	r3, [pc, #120]	; (8004f54 <xPortStartScheduler+0x134>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <xPortStartScheduler+0x134>)
 8004ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <xPortStartScheduler+0x134>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <xPortStartScheduler+0x134>)
 8004eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ef6:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <xPortStartScheduler+0x138>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <xPortStartScheduler+0x138>)
 8004efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <xPortStartScheduler+0x138>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <xPortStartScheduler+0x138>)
 8004f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f0e:	f000 f8dd 	bl	80050cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <xPortStartScheduler+0x13c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f18:	f000 f8fc 	bl	8005114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <xPortStartScheduler+0x140>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <xPortStartScheduler+0x140>)
 8004f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f28:	f7ff ff66 	bl	8004df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f2c:	f7ff f848 	bl	8003fc0 <vTaskSwitchContext>
	prvTaskExitError();
 8004f30:	f7ff ff1e 	bl	8004d70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000ed00 	.word	0xe000ed00
 8004f44:	410fc271 	.word	0x410fc271
 8004f48:	410fc270 	.word	0x410fc270
 8004f4c:	e000e400 	.word	0xe000e400
 8004f50:	20000ee4 	.word	0x20000ee4
 8004f54:	20000ee8 	.word	0x20000ee8
 8004f58:	e000ed20 	.word	0xe000ed20
 8004f5c:	20000014 	.word	0x20000014
 8004f60:	e000ef34 	.word	0xe000ef34

08004f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	607b      	str	r3, [r7, #4]
}
 8004f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <vPortEnterCritical+0x58>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <vPortEnterCritical+0x58>)
 8004f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <vPortEnterCritical+0x58>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10f      	bne.n	8004fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <vPortEnterCritical+0x5c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	603b      	str	r3, [r7, #0]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <vPortEnterCritical+0x4a>
	}
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20000014 	.word	0x20000014
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <vPortExitCritical+0x50>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <vPortExitCritical+0x24>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	607b      	str	r3, [r7, #4]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <vPortExitCritical+0x50>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <vPortExitCritical+0x50>)
 8004ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <vPortExitCritical+0x50>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d105      	bne.n	8005006 <vPortExitCritical+0x42>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f383 8811 	msr	BASEPRI, r3
}
 8005004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000014 	.word	0x20000014
	...

08005020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005020:	f3ef 8009 	mrs	r0, PSP
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	4b15      	ldr	r3, [pc, #84]	; (8005080 <pxCurrentTCBConst>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	f01e 0f10 	tst.w	lr, #16
 8005030:	bf08      	it	eq
 8005032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	6010      	str	r0, [r2, #0]
 800503c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005044:	f380 8811 	msr	BASEPRI, r0
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f7fe ffb6 	bl	8003fc0 <vTaskSwitchContext>
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	f380 8811 	msr	BASEPRI, r0
 800505c:	bc09      	pop	{r0, r3}
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	6808      	ldr	r0, [r1, #0]
 8005062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005066:	f01e 0f10 	tst.w	lr, #16
 800506a:	bf08      	it	eq
 800506c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005070:	f380 8809 	msr	PSP, r0
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst>:
 8005080:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
}
 80050a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050a2:	f7fe fed3 	bl	8003e4c <xTaskIncrementTick>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <xPortSysTickHandler+0x40>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f383 8811 	msr	BASEPRI, r3
}
 80050be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <vPortSetupTimerInterrupt+0x38>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <vPortSetupTimerInterrupt+0x3c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <vPortSetupTimerInterrupt+0x40>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	4a09      	ldr	r2, [pc, #36]	; (8005110 <vPortSetupTimerInterrupt+0x44>)
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000e010 	.word	0xe000e010
 8005104:	e000e018 	.word	0xe000e018
 8005108:	20000008 	.word	0x20000008
 800510c:	10624dd3 	.word	0x10624dd3
 8005110:	e000e014 	.word	0xe000e014

08005114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005124 <vPortEnableVFP+0x10>
 8005118:	6801      	ldr	r1, [r0, #0]
 800511a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800511e:	6001      	str	r1, [r0, #0]
 8005120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005122:	bf00      	nop
 8005124:	e000ed88 	.word	0xe000ed88

08005128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800512e:	f3ef 8305 	mrs	r3, IPSR
 8005132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d914      	bls.n	8005164 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <vPortValidateInterruptPriority+0x70>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <vPortValidateInterruptPriority+0x74>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	7afa      	ldrb	r2, [r7, #11]
 800514a:	429a      	cmp	r2, r3
 800514c:	d20a      	bcs.n	8005164 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <vPortValidateInterruptPriority+0x78>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <vPortValidateInterruptPriority+0x7c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d90a      	bls.n	800518a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	603b      	str	r3, [r7, #0]
}
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <vPortValidateInterruptPriority+0x60>
	}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000e3f0 	.word	0xe000e3f0
 800519c:	20000ee4 	.word	0x20000ee4
 80051a0:	e000ed0c 	.word	0xe000ed0c
 80051a4:	20000ee8 	.word	0x20000ee8

080051a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	; 0x28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051b4:	f7fe fd8e 	bl	8003cd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051b8:	4b5b      	ldr	r3, [pc, #364]	; (8005328 <pvPortMalloc+0x180>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051c0:	f000 f920 	bl	8005404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051c4:	4b59      	ldr	r3, [pc, #356]	; (800532c <pvPortMalloc+0x184>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f040 8093 	bne.w	80052f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01d      	beq.n	8005214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051d8:	2208      	movs	r2, #8
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4413      	add	r3, r2
 80051de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d014      	beq.n	8005214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f023 0307 	bic.w	r3, r3, #7
 80051f0:	3308      	adds	r3, #8
 80051f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <pvPortMalloc+0x6c>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	617b      	str	r3, [r7, #20]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d06e      	beq.n	80052f8 <pvPortMalloc+0x150>
 800521a:	4b45      	ldr	r3, [pc, #276]	; (8005330 <pvPortMalloc+0x188>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d869      	bhi.n	80052f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005224:	4b43      	ldr	r3, [pc, #268]	; (8005334 <pvPortMalloc+0x18c>)
 8005226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005228:	4b42      	ldr	r3, [pc, #264]	; (8005334 <pvPortMalloc+0x18c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800522e:	e004      	b.n	800523a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d903      	bls.n	800524c <pvPortMalloc+0xa4>
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f1      	bne.n	8005230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800524c:	4b36      	ldr	r3, [pc, #216]	; (8005328 <pvPortMalloc+0x180>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	429a      	cmp	r2, r3
 8005254:	d050      	beq.n	80052f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2208      	movs	r2, #8
 800525c:	4413      	add	r3, r2
 800525e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	2308      	movs	r3, #8
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	429a      	cmp	r2, r3
 8005276:	d91f      	bls.n	80052b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <pvPortMalloc+0xf8>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	613b      	str	r3, [r7, #16]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	1ad2      	subs	r2, r2, r3
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052b2:	69b8      	ldr	r0, [r7, #24]
 80052b4:	f000 f908 	bl	80054c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <pvPortMalloc+0x188>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <pvPortMalloc+0x188>)
 80052c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052c6:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <pvPortMalloc+0x188>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <pvPortMalloc+0x190>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d203      	bcs.n	80052da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052d2:	4b17      	ldr	r3, [pc, #92]	; (8005330 <pvPortMalloc+0x188>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <pvPortMalloc+0x190>)
 80052d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <pvPortMalloc+0x184>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <pvPortMalloc+0x194>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a11      	ldr	r2, [pc, #68]	; (800533c <pvPortMalloc+0x194>)
 80052f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052f8:	f7fe fcfa 	bl	8003cf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <pvPortMalloc+0x174>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60fb      	str	r3, [r7, #12]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <pvPortMalloc+0x172>
	return pvReturn;
 800531c:	69fb      	ldr	r3, [r7, #28]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3728      	adds	r7, #40	; 0x28
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20004af4 	.word	0x20004af4
 800532c:	20004b08 	.word	0x20004b08
 8005330:	20004af8 	.word	0x20004af8
 8005334:	20004aec 	.word	0x20004aec
 8005338:	20004afc 	.word	0x20004afc
 800533c:	20004b00 	.word	0x20004b00

08005340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d04d      	beq.n	80053ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005352:	2308      	movs	r3, #8
 8005354:	425b      	negs	r3, r3
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <vPortFree+0xb8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <vPortFree+0x44>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60fb      	str	r3, [r7, #12]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <vPortFree+0x62>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	60bb      	str	r3, [r7, #8]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <vPortFree+0xb8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01e      	beq.n	80053ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11a      	bne.n	80053ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <vPortFree+0xb8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	401a      	ands	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053c8:	f7fe fc84 	bl	8003cd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <vPortFree+0xbc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	4a09      	ldr	r2, [pc, #36]	; (80053fc <vPortFree+0xbc>)
 80053d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053da:	6938      	ldr	r0, [r7, #16]
 80053dc:	f000 f874 	bl	80054c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <vPortFree+0xc0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	4a06      	ldr	r2, [pc, #24]	; (8005400 <vPortFree+0xc0>)
 80053e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ea:	f7fe fc81 	bl	8003cf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20004b08 	.word	0x20004b08
 80053fc:	20004af8 	.word	0x20004af8
 8005400:	20004b04 	.word	0x20004b04

08005404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800540a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800540e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005410:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <prvHeapInit+0xac>)
 8005412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3307      	adds	r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0307 	bic.w	r3, r3, #7
 800542a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <prvHeapInit+0xac>)
 8005434:	4413      	add	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800543c:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <prvHeapInit+0xb0>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <prvHeapInit+0xb0>)
 8005444:	2200      	movs	r2, #0
 8005446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005450:	2208      	movs	r2, #8
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0307 	bic.w	r3, r3, #7
 800545e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <prvHeapInit+0xb4>)
 8005464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <prvHeapInit+0xb4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <prvHeapInit+0xb4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <prvHeapInit+0xb4>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <prvHeapInit+0xb8>)
 8005492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <prvHeapInit+0xbc>)
 800549a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <prvHeapInit+0xc0>)
 800549e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	20000eec 	.word	0x20000eec
 80054b4:	20004aec 	.word	0x20004aec
 80054b8:	20004af4 	.word	0x20004af4
 80054bc:	20004afc 	.word	0x20004afc
 80054c0:	20004af8 	.word	0x20004af8
 80054c4:	20004b08 	.word	0x20004b08

080054c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054d0:	4b28      	ldr	r3, [pc, #160]	; (8005574 <prvInsertBlockIntoFreeList+0xac>)
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e002      	b.n	80054dc <prvInsertBlockIntoFreeList+0x14>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d8f7      	bhi.n	80054d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d108      	bne.n	800550a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	441a      	add	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	441a      	add	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d118      	bne.n	8005550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b15      	ldr	r3, [pc, #84]	; (8005578 <prvInsertBlockIntoFreeList+0xb0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d00d      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e008      	b.n	8005558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <prvInsertBlockIntoFreeList+0xb0>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e003      	b.n	8005558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d002      	beq.n	8005566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20004aec 	.word	0x20004aec
 8005578:	20004af4 	.word	0x20004af4

0800557c <atoi>:
 800557c:	220a      	movs	r2, #10
 800557e:	2100      	movs	r1, #0
 8005580:	f000 b95c 	b.w	800583c <strtol>

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000018 	.word	0x20000018

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4d0d      	ldr	r5, [pc, #52]	; (80055c8 <__libc_init_array+0x38>)
 8005594:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005596:	1b64      	subs	r4, r4, r5
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	2600      	movs	r6, #0
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	4d0b      	ldr	r5, [pc, #44]	; (80055d0 <__libc_init_array+0x40>)
 80055a2:	4c0c      	ldr	r4, [pc, #48]	; (80055d4 <__libc_init_array+0x44>)
 80055a4:	f000 f9ee 	bl	8005984 <_init>
 80055a8:	1b64      	subs	r4, r4, r5
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	2600      	movs	r6, #0
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	08006168 	.word	0x08006168
 80055cc:	08006168 	.word	0x08006168
 80055d0:	08006168 	.word	0x08006168
 80055d4:	0800616c 	.word	0x0800616c

080055d8 <__itoa>:
 80055d8:	1e93      	subs	r3, r2, #2
 80055da:	2b22      	cmp	r3, #34	; 0x22
 80055dc:	b510      	push	{r4, lr}
 80055de:	460c      	mov	r4, r1
 80055e0:	d904      	bls.n	80055ec <__itoa+0x14>
 80055e2:	2300      	movs	r3, #0
 80055e4:	700b      	strb	r3, [r1, #0]
 80055e6:	461c      	mov	r4, r3
 80055e8:	4620      	mov	r0, r4
 80055ea:	bd10      	pop	{r4, pc}
 80055ec:	2a0a      	cmp	r2, #10
 80055ee:	d109      	bne.n	8005604 <__itoa+0x2c>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	da07      	bge.n	8005604 <__itoa+0x2c>
 80055f4:	232d      	movs	r3, #45	; 0x2d
 80055f6:	700b      	strb	r3, [r1, #0]
 80055f8:	4240      	negs	r0, r0
 80055fa:	2101      	movs	r1, #1
 80055fc:	4421      	add	r1, r4
 80055fe:	f000 f927 	bl	8005850 <__utoa>
 8005602:	e7f1      	b.n	80055e8 <__itoa+0x10>
 8005604:	2100      	movs	r1, #0
 8005606:	e7f9      	b.n	80055fc <__itoa+0x24>

08005608 <itoa>:
 8005608:	f7ff bfe6 	b.w	80055d8 <__itoa>

0800560c <__retarget_lock_acquire_recursive>:
 800560c:	4770      	bx	lr

0800560e <__retarget_lock_release_recursive>:
 800560e:	4770      	bx	lr

08005610 <memcpy>:
 8005610:	440a      	add	r2, r1
 8005612:	4291      	cmp	r1, r2
 8005614:	f100 33ff 	add.w	r3, r0, #4294967295
 8005618:	d100      	bne.n	800561c <memcpy+0xc>
 800561a:	4770      	bx	lr
 800561c:	b510      	push	{r4, lr}
 800561e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005626:	4291      	cmp	r1, r2
 8005628:	d1f9      	bne.n	800561e <memcpy+0xe>
 800562a:	bd10      	pop	{r4, pc}

0800562c <memset>:
 800562c:	4402      	add	r2, r0
 800562e:	4603      	mov	r3, r0
 8005630:	4293      	cmp	r3, r2
 8005632:	d100      	bne.n	8005636 <memset+0xa>
 8005634:	4770      	bx	lr
 8005636:	f803 1b01 	strb.w	r1, [r3], #1
 800563a:	e7f9      	b.n	8005630 <memset+0x4>

0800563c <cleanup_glue>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	460c      	mov	r4, r1
 8005640:	6809      	ldr	r1, [r1, #0]
 8005642:	4605      	mov	r5, r0
 8005644:	b109      	cbz	r1, 800564a <cleanup_glue+0xe>
 8005646:	f7ff fff9 	bl	800563c <cleanup_glue>
 800564a:	4621      	mov	r1, r4
 800564c:	4628      	mov	r0, r5
 800564e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005652:	f000 b94b 	b.w	80058ec <_free_r>
	...

08005658 <_reclaim_reent>:
 8005658:	4b2c      	ldr	r3, [pc, #176]	; (800570c <_reclaim_reent+0xb4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4283      	cmp	r3, r0
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	4604      	mov	r4, r0
 8005662:	d051      	beq.n	8005708 <_reclaim_reent+0xb0>
 8005664:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005666:	b143      	cbz	r3, 800567a <_reclaim_reent+0x22>
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d14a      	bne.n	8005704 <_reclaim_reent+0xac>
 800566e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	b111      	cbz	r1, 800567a <_reclaim_reent+0x22>
 8005674:	4620      	mov	r0, r4
 8005676:	f000 f939 	bl	80058ec <_free_r>
 800567a:	6961      	ldr	r1, [r4, #20]
 800567c:	b111      	cbz	r1, 8005684 <_reclaim_reent+0x2c>
 800567e:	4620      	mov	r0, r4
 8005680:	f000 f934 	bl	80058ec <_free_r>
 8005684:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005686:	b111      	cbz	r1, 800568e <_reclaim_reent+0x36>
 8005688:	4620      	mov	r0, r4
 800568a:	f000 f92f 	bl	80058ec <_free_r>
 800568e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005690:	b111      	cbz	r1, 8005698 <_reclaim_reent+0x40>
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f92a 	bl	80058ec <_free_r>
 8005698:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800569a:	b111      	cbz	r1, 80056a2 <_reclaim_reent+0x4a>
 800569c:	4620      	mov	r0, r4
 800569e:	f000 f925 	bl	80058ec <_free_r>
 80056a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80056a4:	b111      	cbz	r1, 80056ac <_reclaim_reent+0x54>
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 f920 	bl	80058ec <_free_r>
 80056ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80056ae:	b111      	cbz	r1, 80056b6 <_reclaim_reent+0x5e>
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 f91b 	bl	80058ec <_free_r>
 80056b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80056b8:	b111      	cbz	r1, 80056c0 <_reclaim_reent+0x68>
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 f916 	bl	80058ec <_free_r>
 80056c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056c2:	b111      	cbz	r1, 80056ca <_reclaim_reent+0x72>
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 f911 	bl	80058ec <_free_r>
 80056ca:	69a3      	ldr	r3, [r4, #24]
 80056cc:	b1e3      	cbz	r3, 8005708 <_reclaim_reent+0xb0>
 80056ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056d0:	4620      	mov	r0, r4
 80056d2:	4798      	blx	r3
 80056d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056d6:	b1b9      	cbz	r1, 8005708 <_reclaim_reent+0xb0>
 80056d8:	4620      	mov	r0, r4
 80056da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056de:	f7ff bfad 	b.w	800563c <cleanup_glue>
 80056e2:	5949      	ldr	r1, [r1, r5]
 80056e4:	b941      	cbnz	r1, 80056f8 <_reclaim_reent+0xa0>
 80056e6:	3504      	adds	r5, #4
 80056e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ea:	2d80      	cmp	r5, #128	; 0x80
 80056ec:	68d9      	ldr	r1, [r3, #12]
 80056ee:	d1f8      	bne.n	80056e2 <_reclaim_reent+0x8a>
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 f8fb 	bl	80058ec <_free_r>
 80056f6:	e7ba      	b.n	800566e <_reclaim_reent+0x16>
 80056f8:	680e      	ldr	r6, [r1, #0]
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 f8f6 	bl	80058ec <_free_r>
 8005700:	4631      	mov	r1, r6
 8005702:	e7ef      	b.n	80056e4 <_reclaim_reent+0x8c>
 8005704:	2500      	movs	r5, #0
 8005706:	e7ef      	b.n	80056e8 <_reclaim_reent+0x90>
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	bf00      	nop
 800570c:	20000018 	.word	0x20000018

08005710 <strncmp>:
 8005710:	b510      	push	{r4, lr}
 8005712:	b17a      	cbz	r2, 8005734 <strncmp+0x24>
 8005714:	4603      	mov	r3, r0
 8005716:	3901      	subs	r1, #1
 8005718:	1884      	adds	r4, r0, r2
 800571a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800571e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005722:	4290      	cmp	r0, r2
 8005724:	d101      	bne.n	800572a <strncmp+0x1a>
 8005726:	42a3      	cmp	r3, r4
 8005728:	d101      	bne.n	800572e <strncmp+0x1e>
 800572a:	1a80      	subs	r0, r0, r2
 800572c:	bd10      	pop	{r4, pc}
 800572e:	2800      	cmp	r0, #0
 8005730:	d1f3      	bne.n	800571a <strncmp+0xa>
 8005732:	e7fa      	b.n	800572a <strncmp+0x1a>
 8005734:	4610      	mov	r0, r2
 8005736:	e7f9      	b.n	800572c <strncmp+0x1c>

08005738 <_strtol_l.constprop.0>:
 8005738:	2b01      	cmp	r3, #1
 800573a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800573e:	d001      	beq.n	8005744 <_strtol_l.constprop.0+0xc>
 8005740:	2b24      	cmp	r3, #36	; 0x24
 8005742:	d906      	bls.n	8005752 <_strtol_l.constprop.0+0x1a>
 8005744:	f7ff ff1e 	bl	8005584 <__errno>
 8005748:	2316      	movs	r3, #22
 800574a:	6003      	str	r3, [r0, #0]
 800574c:	2000      	movs	r0, #0
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005838 <_strtol_l.constprop.0+0x100>
 8005756:	460d      	mov	r5, r1
 8005758:	462e      	mov	r6, r5
 800575a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800575e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005762:	f017 0708 	ands.w	r7, r7, #8
 8005766:	d1f7      	bne.n	8005758 <_strtol_l.constprop.0+0x20>
 8005768:	2c2d      	cmp	r4, #45	; 0x2d
 800576a:	d132      	bne.n	80057d2 <_strtol_l.constprop.0+0x9a>
 800576c:	782c      	ldrb	r4, [r5, #0]
 800576e:	2701      	movs	r7, #1
 8005770:	1cb5      	adds	r5, r6, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d05b      	beq.n	800582e <_strtol_l.constprop.0+0xf6>
 8005776:	2b10      	cmp	r3, #16
 8005778:	d109      	bne.n	800578e <_strtol_l.constprop.0+0x56>
 800577a:	2c30      	cmp	r4, #48	; 0x30
 800577c:	d107      	bne.n	800578e <_strtol_l.constprop.0+0x56>
 800577e:	782c      	ldrb	r4, [r5, #0]
 8005780:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005784:	2c58      	cmp	r4, #88	; 0x58
 8005786:	d14d      	bne.n	8005824 <_strtol_l.constprop.0+0xec>
 8005788:	786c      	ldrb	r4, [r5, #1]
 800578a:	2310      	movs	r3, #16
 800578c:	3502      	adds	r5, #2
 800578e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005792:	f108 38ff 	add.w	r8, r8, #4294967295
 8005796:	f04f 0c00 	mov.w	ip, #0
 800579a:	fbb8 f9f3 	udiv	r9, r8, r3
 800579e:	4666      	mov	r6, ip
 80057a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80057a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80057a8:	f1be 0f09 	cmp.w	lr, #9
 80057ac:	d816      	bhi.n	80057dc <_strtol_l.constprop.0+0xa4>
 80057ae:	4674      	mov	r4, lr
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	dd24      	ble.n	80057fe <_strtol_l.constprop.0+0xc6>
 80057b4:	f1bc 0f00 	cmp.w	ip, #0
 80057b8:	db1e      	blt.n	80057f8 <_strtol_l.constprop.0+0xc0>
 80057ba:	45b1      	cmp	r9, r6
 80057bc:	d31c      	bcc.n	80057f8 <_strtol_l.constprop.0+0xc0>
 80057be:	d101      	bne.n	80057c4 <_strtol_l.constprop.0+0x8c>
 80057c0:	45a2      	cmp	sl, r4
 80057c2:	db19      	blt.n	80057f8 <_strtol_l.constprop.0+0xc0>
 80057c4:	fb06 4603 	mla	r6, r6, r3, r4
 80057c8:	f04f 0c01 	mov.w	ip, #1
 80057cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057d0:	e7e8      	b.n	80057a4 <_strtol_l.constprop.0+0x6c>
 80057d2:	2c2b      	cmp	r4, #43	; 0x2b
 80057d4:	bf04      	itt	eq
 80057d6:	782c      	ldrbeq	r4, [r5, #0]
 80057d8:	1cb5      	addeq	r5, r6, #2
 80057da:	e7ca      	b.n	8005772 <_strtol_l.constprop.0+0x3a>
 80057dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80057e0:	f1be 0f19 	cmp.w	lr, #25
 80057e4:	d801      	bhi.n	80057ea <_strtol_l.constprop.0+0xb2>
 80057e6:	3c37      	subs	r4, #55	; 0x37
 80057e8:	e7e2      	b.n	80057b0 <_strtol_l.constprop.0+0x78>
 80057ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80057ee:	f1be 0f19 	cmp.w	lr, #25
 80057f2:	d804      	bhi.n	80057fe <_strtol_l.constprop.0+0xc6>
 80057f4:	3c57      	subs	r4, #87	; 0x57
 80057f6:	e7db      	b.n	80057b0 <_strtol_l.constprop.0+0x78>
 80057f8:	f04f 3cff 	mov.w	ip, #4294967295
 80057fc:	e7e6      	b.n	80057cc <_strtol_l.constprop.0+0x94>
 80057fe:	f1bc 0f00 	cmp.w	ip, #0
 8005802:	da05      	bge.n	8005810 <_strtol_l.constprop.0+0xd8>
 8005804:	2322      	movs	r3, #34	; 0x22
 8005806:	6003      	str	r3, [r0, #0]
 8005808:	4646      	mov	r6, r8
 800580a:	b942      	cbnz	r2, 800581e <_strtol_l.constprop.0+0xe6>
 800580c:	4630      	mov	r0, r6
 800580e:	e79e      	b.n	800574e <_strtol_l.constprop.0+0x16>
 8005810:	b107      	cbz	r7, 8005814 <_strtol_l.constprop.0+0xdc>
 8005812:	4276      	negs	r6, r6
 8005814:	2a00      	cmp	r2, #0
 8005816:	d0f9      	beq.n	800580c <_strtol_l.constprop.0+0xd4>
 8005818:	f1bc 0f00 	cmp.w	ip, #0
 800581c:	d000      	beq.n	8005820 <_strtol_l.constprop.0+0xe8>
 800581e:	1e69      	subs	r1, r5, #1
 8005820:	6011      	str	r1, [r2, #0]
 8005822:	e7f3      	b.n	800580c <_strtol_l.constprop.0+0xd4>
 8005824:	2430      	movs	r4, #48	; 0x30
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1b1      	bne.n	800578e <_strtol_l.constprop.0+0x56>
 800582a:	2308      	movs	r3, #8
 800582c:	e7af      	b.n	800578e <_strtol_l.constprop.0+0x56>
 800582e:	2c30      	cmp	r4, #48	; 0x30
 8005830:	d0a5      	beq.n	800577e <_strtol_l.constprop.0+0x46>
 8005832:	230a      	movs	r3, #10
 8005834:	e7ab      	b.n	800578e <_strtol_l.constprop.0+0x56>
 8005836:	bf00      	nop
 8005838:	0800605e 	.word	0x0800605e

0800583c <strtol>:
 800583c:	4613      	mov	r3, r2
 800583e:	460a      	mov	r2, r1
 8005840:	4601      	mov	r1, r0
 8005842:	4802      	ldr	r0, [pc, #8]	; (800584c <strtol+0x10>)
 8005844:	6800      	ldr	r0, [r0, #0]
 8005846:	f7ff bf77 	b.w	8005738 <_strtol_l.constprop.0>
 800584a:	bf00      	nop
 800584c:	20000018 	.word	0x20000018

08005850 <__utoa>:
 8005850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005852:	4c1f      	ldr	r4, [pc, #124]	; (80058d0 <__utoa+0x80>)
 8005854:	b08b      	sub	sp, #44	; 0x2c
 8005856:	4605      	mov	r5, r0
 8005858:	460b      	mov	r3, r1
 800585a:	466e      	mov	r6, sp
 800585c:	f104 0c20 	add.w	ip, r4, #32
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	6861      	ldr	r1, [r4, #4]
 8005864:	4637      	mov	r7, r6
 8005866:	c703      	stmia	r7!, {r0, r1}
 8005868:	3408      	adds	r4, #8
 800586a:	4564      	cmp	r4, ip
 800586c:	463e      	mov	r6, r7
 800586e:	d1f7      	bne.n	8005860 <__utoa+0x10>
 8005870:	7921      	ldrb	r1, [r4, #4]
 8005872:	7139      	strb	r1, [r7, #4]
 8005874:	1e91      	subs	r1, r2, #2
 8005876:	6820      	ldr	r0, [r4, #0]
 8005878:	6038      	str	r0, [r7, #0]
 800587a:	2922      	cmp	r1, #34	; 0x22
 800587c:	f04f 0100 	mov.w	r1, #0
 8005880:	d904      	bls.n	800588c <__utoa+0x3c>
 8005882:	7019      	strb	r1, [r3, #0]
 8005884:	460b      	mov	r3, r1
 8005886:	4618      	mov	r0, r3
 8005888:	b00b      	add	sp, #44	; 0x2c
 800588a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588c:	1e58      	subs	r0, r3, #1
 800588e:	4684      	mov	ip, r0
 8005890:	fbb5 f7f2 	udiv	r7, r5, r2
 8005894:	fb02 5617 	mls	r6, r2, r7, r5
 8005898:	3628      	adds	r6, #40	; 0x28
 800589a:	446e      	add	r6, sp
 800589c:	460c      	mov	r4, r1
 800589e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80058a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80058a6:	462e      	mov	r6, r5
 80058a8:	42b2      	cmp	r2, r6
 80058aa:	f101 0101 	add.w	r1, r1, #1
 80058ae:	463d      	mov	r5, r7
 80058b0:	d9ee      	bls.n	8005890 <__utoa+0x40>
 80058b2:	2200      	movs	r2, #0
 80058b4:	545a      	strb	r2, [r3, r1]
 80058b6:	1919      	adds	r1, r3, r4
 80058b8:	1aa5      	subs	r5, r4, r2
 80058ba:	42aa      	cmp	r2, r5
 80058bc:	dae3      	bge.n	8005886 <__utoa+0x36>
 80058be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80058c2:	780e      	ldrb	r6, [r1, #0]
 80058c4:	7006      	strb	r6, [r0, #0]
 80058c6:	3201      	adds	r2, #1
 80058c8:	f801 5901 	strb.w	r5, [r1], #-1
 80058cc:	e7f4      	b.n	80058b8 <__utoa+0x68>
 80058ce:	bf00      	nop
 80058d0:	08006038 	.word	0x08006038

080058d4 <__malloc_lock>:
 80058d4:	4801      	ldr	r0, [pc, #4]	; (80058dc <__malloc_lock+0x8>)
 80058d6:	f7ff be99 	b.w	800560c <__retarget_lock_acquire_recursive>
 80058da:	bf00      	nop
 80058dc:	20004b0c 	.word	0x20004b0c

080058e0 <__malloc_unlock>:
 80058e0:	4801      	ldr	r0, [pc, #4]	; (80058e8 <__malloc_unlock+0x8>)
 80058e2:	f7ff be94 	b.w	800560e <__retarget_lock_release_recursive>
 80058e6:	bf00      	nop
 80058e8:	20004b0c 	.word	0x20004b0c

080058ec <_free_r>:
 80058ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ee:	2900      	cmp	r1, #0
 80058f0:	d044      	beq.n	800597c <_free_r+0x90>
 80058f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f6:	9001      	str	r0, [sp, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f1a1 0404 	sub.w	r4, r1, #4
 80058fe:	bfb8      	it	lt
 8005900:	18e4      	addlt	r4, r4, r3
 8005902:	f7ff ffe7 	bl	80058d4 <__malloc_lock>
 8005906:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <_free_r+0x94>)
 8005908:	9801      	ldr	r0, [sp, #4]
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	b933      	cbnz	r3, 800591c <_free_r+0x30>
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	6014      	str	r4, [r2, #0]
 8005912:	b003      	add	sp, #12
 8005914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005918:	f7ff bfe2 	b.w	80058e0 <__malloc_unlock>
 800591c:	42a3      	cmp	r3, r4
 800591e:	d908      	bls.n	8005932 <_free_r+0x46>
 8005920:	6825      	ldr	r5, [r4, #0]
 8005922:	1961      	adds	r1, r4, r5
 8005924:	428b      	cmp	r3, r1
 8005926:	bf01      	itttt	eq
 8005928:	6819      	ldreq	r1, [r3, #0]
 800592a:	685b      	ldreq	r3, [r3, #4]
 800592c:	1949      	addeq	r1, r1, r5
 800592e:	6021      	streq	r1, [r4, #0]
 8005930:	e7ed      	b.n	800590e <_free_r+0x22>
 8005932:	461a      	mov	r2, r3
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b10b      	cbz	r3, 800593c <_free_r+0x50>
 8005938:	42a3      	cmp	r3, r4
 800593a:	d9fa      	bls.n	8005932 <_free_r+0x46>
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	1855      	adds	r5, r2, r1
 8005940:	42a5      	cmp	r5, r4
 8005942:	d10b      	bne.n	800595c <_free_r+0x70>
 8005944:	6824      	ldr	r4, [r4, #0]
 8005946:	4421      	add	r1, r4
 8005948:	1854      	adds	r4, r2, r1
 800594a:	42a3      	cmp	r3, r4
 800594c:	6011      	str	r1, [r2, #0]
 800594e:	d1e0      	bne.n	8005912 <_free_r+0x26>
 8005950:	681c      	ldr	r4, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	6053      	str	r3, [r2, #4]
 8005956:	4421      	add	r1, r4
 8005958:	6011      	str	r1, [r2, #0]
 800595a:	e7da      	b.n	8005912 <_free_r+0x26>
 800595c:	d902      	bls.n	8005964 <_free_r+0x78>
 800595e:	230c      	movs	r3, #12
 8005960:	6003      	str	r3, [r0, #0]
 8005962:	e7d6      	b.n	8005912 <_free_r+0x26>
 8005964:	6825      	ldr	r5, [r4, #0]
 8005966:	1961      	adds	r1, r4, r5
 8005968:	428b      	cmp	r3, r1
 800596a:	bf04      	itt	eq
 800596c:	6819      	ldreq	r1, [r3, #0]
 800596e:	685b      	ldreq	r3, [r3, #4]
 8005970:	6063      	str	r3, [r4, #4]
 8005972:	bf04      	itt	eq
 8005974:	1949      	addeq	r1, r1, r5
 8005976:	6021      	streq	r1, [r4, #0]
 8005978:	6054      	str	r4, [r2, #4]
 800597a:	e7ca      	b.n	8005912 <_free_r+0x26>
 800597c:	b003      	add	sp, #12
 800597e:	bd30      	pop	{r4, r5, pc}
 8005980:	20004b10 	.word	0x20004b10

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
